- en: Working with Advanced Relationships and Serialization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与高级关系和序列化协同工作
- en: 'In this chapter, we will create a complex RESTful Web Service that will persist
    data in a PostgreSQL database. We will work with different types of relationships
    between the resources and we will take advantage of generic classes and generic
    views provided by the Django REST framework to reduce the amount of boilerplate
    code. We will gain an understanding of:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建一个复杂的 RESTful 网络服务，该服务将在 PostgreSQL 数据库中持久化数据。我们将处理资源之间的不同类型的关系，并利用
    Django REST 框架提供的通用类和通用视图来减少样板代码的数量。我们将了解：
- en: Defining the requirements for a complex RESTful Web Service
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义复杂 RESTful 网络服务的要求
- en: Creating a new app with Django
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Django 创建新的应用程序
- en: Configuring a new web service
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置新的网络服务
- en: Defining many-to-one relationships with models.ForeignKey
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 models.ForeignKey 定义多对一关系
- en: Installing PostgreSQL
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 PostgreSQL
- en: Running migrations that generate relationships
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行生成关系的迁移
- en: Analyzing the database
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析数据库
- en: Configuring serialization and deserialization with relationships
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置具有关系的序列化和反序列化
- en: Defining hyperlinks with serializers.HyperlinkedModelSerializer
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 serializers.HyperlinkedModelSerializer 定义超链接
- en: Working with class-based views
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基于类的视图协同工作
- en: Taking advantage of generic classes and generic views
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用通用类和通用视图
- en: Generalizing and mixing behavior
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 概化和混合行为
- en: Working with routing and endpoints
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与路由和端点协同工作
- en: Making requests that interact with resources that have relationships
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向与具有关系的资源进行交互的请求
- en: Defining the requirements for a complex RESTful Web Service
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义复杂 RESTful 网络服务的要求
- en: So far, our RESTful Web Service performed CRUD operations on a single database
    table. Now, we want to create a more complex RESTful Web Service with the Django
    REST framework to interact with a complex database model.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的 RESTful 网络服务在单个数据库表上执行 CRUD 操作。现在，我们想要使用 Django REST 框架创建一个更复杂的 RESTful
    网络服务，以与复杂的数据库模型进行交互。
- en: A drone is an **IoT** (short for **Internet of Things**) device that interacts
    with many sensors and actuators, including digital electronic speed controllers
    linked to engines, propellers, and sensors. A drone is also known as an **Unnamed
    Aerial Vehicle** (**UAV**). We will code a RESTful Web Service that will allow
    us to register competitions for drones that are grouped into drone categories.
    In our previous RESTful Web Service, we had toys grouped in toy categories and
    we used a string field to specify the toy category for a toy. In this case, we
    want to be able to easily retrieve all the drones that belong to a specific drone
    category. Thus, we will have a relationship between a drone and a drone category.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 无人机是一种 **IoT**（即 **物联网**）设备，与许多传感器和执行器交互，包括与发动机、螺旋桨和传感器连接的数字电子速度控制器。无人机也被称为
    **无人驾驶空中车辆**（**UAV**）。我们将编写一个 RESTful 网络服务，允许我们为归类到无人机类别的无人机注册竞赛。在我们的上一个 RESTful
    网络服务中，我们有玩具归类在玩具类别中，我们使用字符串字段来指定玩具的玩具类别。在这种情况下，我们希望能够轻松检索属于特定无人机类别的所有无人机。因此，我们将有一个无人机与无人机类别之间的关系。
- en: We must be able to perform CRUD operations on diverse resources and resource
    collections. Many resources have relationships with other resources, and therefore,
    we won't work with simple models. We will learn how to establish different kinds
    of relationships between the models.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须能够在各种资源和资源集合上执行 CRUD 操作。许多资源与其他资源有关联，因此，我们不会使用简单的模型。我们将学习如何在模型之间建立不同类型的关系。
- en: 'The following list enumerates the resources and the model name we will use
    to represent them in a Django REST framework:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表列举了我们将使用的资源及其模型名称，我们将使用 Django REST 框架来表示它们：
- en: Drone categories (`DroneCategory` model)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无人机类别（`DroneCategory` 模型）
- en: Drones (`Drone` model)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无人机（`Drone` 模型）
- en: Pilots (`Pilot` model)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 飞行员（`Pilot` 模型）
- en: Competitions (`Competition` model)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 竞赛（`Competition` 模型）
- en: The drone category (`DroneCategory` model) just requires a name.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 无人机类别（`DroneCategory` 模型）只需要一个名称。
- en: 'We need the following data for a drone (`Drone` model):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个无人机（`Drone` 模型）所需的数据：
- en: A foreign key to a drone category (`DroneCategory` model)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个指向无人机类别（`DroneCategory` 模型）的外键
- en: A name
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名称
- en: A manufacturing date
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产日期
- en: A bool value indicating whether the drone participated in at least one competition
    or not
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个布尔值，表示无人机是否至少参与了一场竞赛
- en: A timestamp with the date and time in which the drone was inserted in the database
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含无人机被插入数据库的日期和时间的戳记
- en: 'We need the following data for a pilot (`Pilot` model):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个试点（`Pilot` 模型）所需的数据：
- en: A name
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名称
- en: A gender value
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性别值
- en: An integer value with the number of races in which the pilot participated
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参与的比赛次数的整数值
- en: A timestamp with the date and time in which the pilot was inserted in the database
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 飞行员被插入数据库的日期和时间戳
- en: 'We need the following data for the competition (`Competition` model):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要以下数据用于比赛（`Competition`模型）：
- en: A foreign key to a pilot (`Pilot` model)
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个指向飞行员（`Pilot`模型）的外键
- en: A foreign key to a drone (`Drone` model)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个指向无人机（`Drone`模型）的外键
- en: A distance value (measured in feet)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 距离值（以英尺为单位）
- en: A date in which the drone controlled by the pilot reached the specified distance
    value
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 飞行员控制的无人机达到指定距离值的日期
- en: We will use diverse options that the Django REST framework provides us to materialize
    the relationship between resources. This way, we will be able to analyze different
    configurations that will make it possible for us to know which is the best option
    based on the specific requirements of new web services that we will develop in
    the future.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Django REST框架提供的各种选项来体现资源之间的关系。这样，我们将能够分析不同的配置，这将使我们能够知道哪种选项最适合我们未来开发的新网络服务的特定要求。
- en: 'The following table shows the HTTP verbs, the scope and the semantics for the
    methods that our new RESTful Web Service must support. Each method is composed
    by an HTTP verb and a scope. All the methods have well-defined meanings for all
    the resources and resource collections. In this case, we will implement the PATCH
    HTTP verb for all the resources:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了我们的新RESTful Web服务必须支持的HTTP动词、作用域和语义。每个方法由一个HTTP动词和一个作用域组成。所有方法对所有资源和资源集合都有明确的含义。在这种情况下，我们将为所有资源实现PATCH
    HTTP动词：
- en: '| **HTTP verb** | **Scope** | **Semantics** |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| **HTTP动词** | **作用域** | **语义** |'
- en: '| GET | Drone category | Retrieve a single drone category. The drone category
    must include a list of URLs for each drone resource that belongs to the drone
    category. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| GET | 无人机类别 | 获取单个无人机类别。无人机类别必须包括属于该无人机类别的每个无人机资源的URL列表。|'
- en: '| GET | Collection of drone categories | Retrieve all the stored drone categories
    in the collection, sorted by their name in ascending order. Each drone category
    must include a list of URLs for each drone resource that belongs to the drone
    category. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| GET | 无人机类别集合 | 获取集合中所有存储的无人机类别，按名称升序排序。每个无人机类别必须包括属于该无人机类别的每个无人机资源的URL列表。|'
- en: '| POST | Collection of drone categories | Create a new drone category in the
    collection. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| POST | 无人机类别集合 | 在集合中创建一个新的无人机类别。|'
- en: '| PUT | Drone category | Update an existing drone category. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| PUT | 无人机类别 | 更新现有的无人机类别。|'
- en: '| PATCH | Drone category | Update one or more fields of an existing drone category.
    |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| PATCH | 无人机类别 | 更新现有无人机类别的一个或多个字段。|'
- en: '| DELETE | Drone category | Delete an existing drone category. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| DELETE | 无人机类别 | 删除现有的无人机类别。|'
- en: '| GET | Drone | Retrieve a single drone. The drone must include its drone category
    description. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| GET | 无人机 | 获取单个无人机。无人机必须包括其无人机类别描述。|'
- en: '| GET | Collection of drones | Retrieve all the stored drones in the collection,
    sorted by their name in ascending order. Each drone must include its drone category
    description. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| GET | 无人机集合 | 获取集合中所有存储的无人机，按名称升序排序。每架无人机必须包括其无人机类别描述。|'
- en: '| POST | Collection of drones | Create a new drone in the collection. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| POST | 无人机集合 | 在集合中创建一个新的无人机。|'
- en: '| PUT | Drone | Update an existing drone. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| PUT | 无人机 | 更新现有的无人机。|'
- en: '| PATCH | Drone | Update one or more fields of an existing drone. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| PATCH | 无人机 | 更新现有无人机的一个或多个字段。|'
- en: '| DELETE | Drone | Delete an existing drone. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| DELETE | 无人机 | 删除现有的无人机。|'
- en: '| GET | Pilot | Retrieve a single pilot. The pilot must include a list of the
    registered competitions, sorted by distance in descending order. The list must
    include all the details for the competition in which the pilots and his related
    drone participated. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| GET | 飞行员 | 获取单个飞行员。飞行员必须包括按距离降序排序的已注册比赛列表。列表必须包括飞行员及其相关无人机参加的比赛的所有详细信息。|'
- en: '| GET | Collection of pilots | Retrieve all the stored pilots in the collection,
    sorted by their name in ascending order. Each pilot must include a list of the
    registered competitions, sorted by distance in descending order. The list must
    include all the details for the competition in which the pilot and his related
    drone participated. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| GET | 飞行员集合 | 获取集合中存储的所有飞行员，按姓名升序排列。每个飞行员必须包括注册竞赛的列表，按距离降序排列。列表必须包括飞行员及其相关无人机参与的竞赛的所有详细信息。|'
- en: '| POST | Collection of pilots | Create a new pilot in the collection. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| POST | 飞行员集合 | 在集合中创建一个新的飞行员。|'
- en: '| PUT | Pilot | Update an existing pilot. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| PUT | 飞行员 | 更新现有飞行员。|'
- en: '| PATCH | Pilot | Update one or more fields of an existing pilot. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| PATCH | 飞行员 | 更新现有飞行员的字段。|'
- en: '| DELETE | Pilot | Delete an existing pilot. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| DELETE | 飞行员 | 删除现有飞行员。|'
- en: '| GET | Competition | Retrieve a single competition. The competition must include
    the pilot''s name that made the drone reach a specific distance and the drone''s
    name. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| GET | 竞赛 | 获取单个竞赛。竞赛必须包括使无人机达到特定距离的飞行员姓名和无人机名称。|'
- en: '| GET | Collection of competitions | Retrieve all the stored competitions in
    the collection, sorted by distance in descending order. Each competition must
    include the pilot''s name that made the drone reach a specific distance and the
    drone''s name. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| GET | 竞赛集合 | 获取集合中存储的所有竞赛，按距离降序排列。每个竞赛必须包括使无人机达到特定距离的飞行员姓名和无人机名称。|'
- en: '| POST | Collection of competitions | Create a new competition in the collection.
    The competition must be related to an existing pilot and an existing drone. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| POST | 竞赛集合 | 在集合中创建一个新的竞赛。竞赛必须与现有飞行员和现有无人机相关。|'
- en: '| PUT | Competition | Update an existing competition. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| PUT | 竞赛 | 更新现有竞赛。|'
- en: '| PATCH | Competition | Update one or more fields of an existing competition.
    |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| PATCH | 竞赛 | 更新现有竞赛的一个或多个字段。|'
- en: '| DELETE | Competition | Delete an existing competition. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| DELETE | 竞赛 | 删除现有竞赛。|'
- en: 'In the previous table, we have a huge number of methods and scopes. The following
    table enumerates the URIs for each scope mentioned in the previous table, where
    `{id}` has to be replaced with the numeric `id` or primary key of the resource:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个表中，我们有大量的方法和范围。下表列举了前表中提到的每个范围的URI，其中`{id}`必须替换为资源的数字`id`或主键：
- en: '| **Scope** | **URI** |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| **范围** | **URI** |'
- en: '| Collection of drone categories | `/drone-categories/` |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 无人机类别集合 | `/drone-categories/` |'
- en: '| Drone category | `/drone-category/{id}` |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 无人机类别 | `/drone-category/{id}` |'
- en: '| Collection of drones | `/drones/` |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 无人机集合 | `/drones/` |'
- en: '| Drone | `/drone/{id}` |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 无人机 | `/drone/{id}` |'
- en: '| Collection of pilots | `/pilots/` |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 飞行员集合 | `/pilots/` |'
- en: '| Pilot | `/pilot/{id}` |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 飞行员 | `/pilot/{id}` |'
- en: '| Collection of competitions | `/competitions/` |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 竞赛集合 | `/competitions/` |'
- en: '| Competition | `/competition/{id}` |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 竞赛 | `/competition/{id}` |'
- en: Let's consider that `http://localhost:8000/` is the URL for the RESTful Web
    Service running on Django's development server. We have to compose and send an
    HTTP request with the following HTTP verb (`GET`) and request URL (`http://localhost:8000/competitions/`)
    to retrieve all the stored competitions in the collection.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑`http://localhost:8000/`是运行在Django开发服务器上的RESTful Web Service的URL。我们必须使用以下HTTP动词（`GET`）和请求URL（`http://localhost:8000/competitions/`）来组合和发送HTTP请求，以检索集合中存储的所有竞赛。
- en: '[PRE0]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Our RESTful Web Service must be able to update a single field for an existing
    resource. In order to make this possible, we will implement the `PATCH` method.
    Remember that the `PUT` method is meant to replace an entire resource and the
    `PATCH` method is meant to apply a delta to an existing resource, that is, to
    update one or more fields for an existing resource.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的RESTful Web Service必须能够更新现有资源的单个字段。为了实现这一点，我们将实现`PATCH`方法。记住，`PUT`方法旨在替换整个资源，而`PATCH`方法旨在应用一个delta到现有资源，即更新现有资源的一个或多个字段。
- en: We definitely want our RESTful Web Serice to support the `OPTIONS` method for
    all the resources and collections of resources. This way, we will provide a consistent
    web service.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们肯定希望我们的RESTful Web Service支持所有资源和资源集合的`OPTIONS`方法。这样，我们将提供一个一致的Web服务。
- en: We will use the **ORM** (short for **Object-Relational Mapping**) included in
    Django. In addition, we will take advantage of many features and reusable elements
    included in the latest version of the Django REST framework to make it easy to
    build our web service without writing a huge amount of code.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Django 中包含的 **ORM**（即 **对象关系映射**）。此外，我们将利用 Django REST 框架最新版本中包含的许多功能和可重用元素，以便在不编写大量代码的情况下轻松构建我们的网络服务。
- en: In this case, we will work with a PostgreSQL database. However, in case you
    don't want to spend time installing PostgreSQL, you can skip the changes we make
    in the Django REST framework ORM configuration and continue working with the default
    SQLite database, as we did with our first RESTful Web Service.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将使用 PostgreSQL 数据库。但是，如果您不想花费时间安装 PostgreSQL，您可以跳过我们在 Django REST 框架
    ORM 配置中进行的更改，并继续使用默认的 SQLite 数据库，就像我们在第一个 RESTful 网络服务中做的那样。
- en: Creating a new app with Django
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Django 创建新应用程序
- en: Now, we will create a new app with Django. We will follow the same steps we
    learned in [Chapter 1](dj-rst-websvc_ch11.html), *Installing the Required Software
    and Tools*, in the *Creating an app with Django* section. However, in order to
    avoid repeating many steps, we will use the same `restful01` project we had created
    in that chapter. Hence, we will just add a new app to an existing project.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用 Django 创建一个新的应用程序。我们将遵循我们在 *Creating an app with Django* 部分的 [第 1 章](dj-rst-websvc_ch11.html)，*安装所需的软件和工具*
    中学到的相同步骤。但是，为了避免重复许多步骤，我们将使用我们在该章节中创建的相同 `restful01` 项目。因此，我们只需向现有项目添加一个新应用程序即可。
- en: Make sure you quit Django's development server. Remember that you just need
    to press *Ctrl* + *C* in the terminal or command-prompt window in which it is
    running. In case you weren't running Django's development server, make sure the
    virtual environment in which we have been working in the previous chapter is activated.
    Then, go to the `restful01` folder within the `01` folder (the root folder for
    our virtual environment). The following commands use the default paths to go to
    this folder. In case you have used a different path for your virtual environment,
    make sure you replace the base path with the appropriate one.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已退出 Django 的开发服务器。请记住，您只需在运行开发服务器的终端或命令提示符窗口中按 *Ctrl* + *C* 即可。如果您没有运行 Django
    的开发服务器，请确保我们之前章节中工作的虚拟环境已激活。然后，进入 `01` 文件夹内的 `restful01` 文件夹（虚拟环境的根文件夹）。以下命令使用默认路径进入此文件夹。如果您为虚拟环境使用了不同的路径，请确保将基本路径替换为适当的路径。
- en: 'In Linux or macOS, enter the following command:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 或 macOS 中，输入以下命令：
- en: '[PRE1]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you prefer the Command Prompt, run the following command in the Windows
    command line:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢命令提示符，请在 Windows 命令行中运行以下命令：
- en: '[PRE2]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you prefer Windows PowerShell, run the following command in Windows PowerShell:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢 Windows PowerShell，请在 Windows PowerShell 中运行以下命令：
- en: '[PRE3]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, run the following command to create a new Django app named `drones` within
    the `restful01` Django project. The command won''t produce any output:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行以下命令在 `restful01` Django 项目中创建一个名为 `drones` 的新 Django 应用程序。该命令不会产生任何输出：
- en: '[PRE4]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The previous command creates a new `restful01/drones` sub-folder, with the
    following files:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令创建了一个新的 `restful01/drones` 子文件夹，包含以下文件：
- en: '`views.py`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`views.py`'
- en: '`tests.py`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tests.py`'
- en: '`models.py`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`models.py`'
- en: '`apps.py`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apps.py`'
- en: '`admin.py`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin.py`'
- en: '`__init__.py`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__.py`'
- en: In addition, the `restful01/drones` folder will have a `migrations` sub-folder
    with an `__init__.py` Python script. The structure is the same as the one we analyzed
    in [Chapter 1](dj-rst-websvc_ch11.html)*, Installing the Required Software and
    Tools*, in the *Understanding Django folders, files and configurations* section.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`restful01/drones` 文件夹将有一个名为 `migrations` 的子文件夹，其中包含一个 `__init__.py` Python
    脚本。其结构与我们之前在 *Understanding Django folders, files and configurations* 部分的 [第 1
    章](dj-rst-websvc_ch11.html)*，安装所需的软件和工具* 中分析的结构相同。
- en: Configuring a new web service
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置新的网络服务
- en: 'We added a new Django app to our existing Django project. Use your favorite
    editor or IDE to check the Python code in the `apps.py` file within the `restful01/drones`
    folder (`restful01\drones` in Windows). The following lines show the code for
    this file:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向现有的 Django 项目中添加一个新的 Django 应用程序。使用您喜欢的编辑器或 IDE 检查 `restful01/drones` 文件夹（Windows
    中为 `restful01\drones`）内的 `apps.py` 文件中的 Python 代码。以下行显示了此文件的代码：
- en: '[PRE5]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The code declares the `DronesConfig` class as a subclass of the `django.apps.AppConfig`
    class that represents a Django application and its configuration. The `DronesConfig`
    class just defines the `name` class attribute and sets its value to `'drones'`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 代码将 `DronesConfig` 类声明为 `django.apps.AppConfig` 类的子类，该类代表 Django 应用及其配置。`DronesConfig`
    类仅定义了 `name` 类属性，并将其值设置为 `'drones'`。
- en: 'Now, we have to add `drones.apps.DronesConfig` as one of the installed apps
    in the `restful01/settings.py` file that configures settings for the `restful01`
    Django project. I built the previous string by concatenating many values as follows:
    app name + `.apps.` + class name, which is, `drones` + `.apps.` + `DronesConfig`.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须将 `drones.apps.DronesConfig` 添加到配置 `restful01` Django 项目的 `restful01/settings.py`
    文件中的已安装应用之一。我通过以下方式构建了前面的字符串：应用名称 + `.apps.` + 类名称，即 `drones` + `.apps.` + `DronesConfig`。
- en: We already added the `rest_framework` app to make it possible for us to use
    the Django REST framework in the `restful01/settings.py` file. However, in case
    you decided to create a new Django project from scratch by following all the steps
    we learned in [Chapter 1](dj-rst-websvc_ch11.html), *Installing the Required Software
    and Tools*, make sure you don't forget to add the `rest_framework` app.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将 `rest_framework` 应用添加到 `restful01/settings.py` 文件中，以便我们可以在其中使用 Django
    REST 框架。然而，如果你决定按照我们在第 1 章（[Chapter 1](dj-rst-websvc_ch11.html)）中学习的所有步骤从头开始创建一个新的
    Django 项目，请确保不要忘记添加 `rest_framework` 应用。
- en: Open the `restful01/settings.py` file that declares module-level variables that
    define the configuration of Django for the `restful01` project. We will make some
    changes to this Django settings file. Locate the lines that assign a strings list
    to `INSTALLED_APPS` to declare the installed apps.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 打开声明 `restful01` 项目 Django 配置的模块级变量的 `restful01/settings.py` 文件。我们将对此 Django
    设置文件进行一些修改。定位到将字符串列表分配给 `INSTALLED_APPS` 的行，以声明已安装的应用。
- en: 'Remove the following line from the `INSTALLED_APPS` strings list. This way,
    Django won''t consider this app anymore:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `INSTALLED_APPS` 字符串列表中删除以下行。这样，Django 就不会再考虑此应用：
- en: '[PRE6]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add the following string to the `INSTALLED_APPS` strings list and save the
    changes to the `restful01/settings.py` file:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下字符串添加到 `INSTALLED_APPS` 字符串列表中，并将更改保存到 `restful01/settings.py` 文件中：
- en: '[PRE7]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following lines show the new code that declares the `INSTALLED_APPS` strings
    list with the added line highlighted and with comments to understand what each
    added string means. The code file for the sample is included in the `hillar_django_restful_06_01`
    folder, in the `restful01/settings.py` file:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了声明 `INSTALLED_APPS` 字符串列表的新代码，其中添加的行被突出显示，并带有注释以理解每个添加的字符串的含义。示例代码文件包含在
    `hillar_django_restful_06_01` 文件夹中，在 `restful01/settings.py` 文件中：
- en: '[PRE8]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This way, we have added the `drones` application to our initial Django project
    named `restful01`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们已经将 `drones` 应用添加到了我们最初的名为 `restful01` 的 Django 项目中。
- en: Defining many-to-one relationships with models.ForeignKey
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 models.ForeignKey 定义多对一关系
- en: Now, we will create the models that we will use to represent and persist the
    drone categories, drones, pilots, and competitions, and their relationships. Open
    the `drones/models.py` file and replace its contents with the following code.
    The lines that declare fields related to other models are highlighted in the code
    listing. The code file for the sample is included in the `hillar_django_restful_06_01`
    folder, in the `restful01/drones/models.py` file.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建用于表示和持久化无人机类别、无人机、飞行员和比赛及其关系的模型。打开 `drones/models.py` 文件，并用以下代码替换其内容。代码中声明与其它模型相关字段的行被突出显示。示例代码文件包含在
    `hillar_django_restful_06_01` 文件夹中，在 `restful01/drones/models.py` 文件中。
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The code declares the following four models, specifically, four classes that
    are subclasses of the `django.db.models.Model` class:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 代码声明了以下四个模型，具体来说，是四个继承自 `django.db.models.Model` 类的类：
- en: '`DroneCategory`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DroneCategory`'
- en: '`Drone`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Drone`'
- en: '`Pilot`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Pilot`'
- en: '`Competition`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Competition`'
- en: Django automatically adds an auto-increment integer primary key column named
    `id` when it creates the database table related to each model. We specify the
    field types, maximum lengths, and defaults for many attributes.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Django 创建与每个模型相关的数据库表时，它会自动添加一个名为 `id` 的自增整数主键列。我们指定了许多属性的字段类型、最大长度和默认值。
- en: Each class declares a `Meta` inner class that declares an ordering attribute.
    The `Meta` inner class declared within the `Competition` class specifies `'-distance_in_feet'`
    as the value of the `ordering` tuple, with a dash as a prefix of the field name
    to order by `distance_in_feet` in descending order, instead of the default ascending
    order.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 每个类声明了一个 `Meta` 内部类，该类声明了一个排序属性。在 `Competition` 类中声明的 `Meta` 内部类将 `'-distance_in_feet'`
    作为 `ordering` 元组的值，以字段名前缀的连字符为前缀，按降序对 `distance_in_feet` 进行排序，而不是默认的升序。
- en: The `DroneCategory`, `Drone`, and `Pilot` classes declare a `__str__` method
    that returns the contents of the `name` attribute that provides the name or title
    for each of these models. This way, whenever Django needs to provide a human readable
    representation for the model, it will call this method and return its result.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`DroneCategory`、`Drone` 和 `Pilot` 类声明了一个 `__str__` 方法，该方法返回 `name` 属性的内容，为这些模型中的每一个提供名称或标题。这样，每当
    Django 需要为模型提供人类可读的表示时，它将调用此方法并返回其结果。'
- en: 'The `Drone` model declares the `drone_category` field with the following line:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`Drone` 模型使用以下行声明了 `drone_category` 字段：'
- en: '[PRE10]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The previous line uses the `django.db.models.ForeignKey` class to provide a
    many-to-one relationship to the `DroneCategory` model. The `'drones'` value specified
    for the `related_name` argument creates a backwards relation from the `DroneCategory`
    model to the `Drone` model. This value indicates the name to use for the relation
    from the related `DroneCategory` object back to a Drone object.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 上一行使用 `django.db.models.ForeignKey` 类为 `DroneCategory` 模型提供了一个多对一的关系。为 `related_name`
    参数指定的 `'drones'` 值从 `DroneCategory` 模型创建了一个反向关系到 `Drone` 模型。此值表示从相关的 `DroneCategory`
    对象到无人机对象的关联名称。
- en: This way, we will be able to easily access all the drones that belong to a specific
    drone category. Whenever we delete a drone category, we want all the drones that
    belong to this category to be deleted, too, and therefore, we specified the `models.CASCADE`
    value for the `on_delete` argument.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们将能够轻松访问属于特定无人机类别的所有无人机。每当我们要删除一个无人机类别时，我们希望属于此类别的所有无人机也被删除，因此，我们为 `on_delete`
    参数指定了 `models.CASCADE` 值。
- en: 'The `Competition` model declares the `pilot` field with the following line:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`Competition` 模型使用以下行声明了 `pilot` 字段：'
- en: '[PRE11]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The previous line uses the `django.db.models.ForeignKey` class to provide a
    many-to-one relationship to the `Pilot` model. The `'competitions'` value specified
    for the `related_name` argument creates a backwards relation from the `Pilot`
    model to the `Competition` model. This value indicates the name to use for the
    relation from the related Pilot object back to a Competition object.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 上一行使用 `django.db.models.ForeignKey` 类为 `Pilot` 模型提供了一个多对一的关系。为 `related_name`
    参数指定的 `'competitions'` 值从 `Pilot` 模型创建了一个反向关系到 `Competition` 模型。此值表示从相关的飞行员对象到比赛对象的关联名称。
- en: This way, we will be able to easily access all the competitions in which a specific
    pilot participated with his drone. Whenever we delete a pilot, we want all the
    competitions in which this pilot participated to be deleted, too, and therefore,
    we specified the `models.CASCADE` value for the `on_delete` argument.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们将能够轻松访问特定飞行员使用其无人机参与的所有的比赛。每当我们要删除一个飞行员时，我们希望删除该飞行员参与的所有的比赛，因此，我们为 `on_delete`
    参数指定了 `models.CASCADE` 值。
- en: 'The `Competition` model declares the `drone` field with the following line:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`Competition` 模型使用以下行声明了 `drone` 字段：'
- en: '[PRE12]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The previous line uses the `django.db.models.ForeignKey` class to provide a
    many-to-one relationship to the `Drone` model. In this case, we don't create a
    backwards relation because we don't need it. Thus, we don't specify a value for
    the `related_name` argument. Whenever we delete a drone, we want all the competitions
    in which the drone participated to be deleted too, and therefore, we specified
    the `models.CASCADE` value for the `on_delete` argument.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 上一行使用 `django.db.models.ForeignKey` 类为 `Drone` 模型提供了一个多对一的关系。在这种情况下，我们不需要创建反向关系，因此我们不指定
    `related_name` 参数的值。每当我们要删除一个无人机时，我们希望删除该无人机参与的所有的比赛，因此，我们为 `on_delete` 参数指定了
    `models.CASCADE` 值。
- en: Installing PostgreSQL
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 PostgreSQL
- en: 'In order to work with this example, you have to download and install PostgreSQL,
    in case you aren''t already running it in your development computer or in a development
    server. PostgreSQL is available on multiple platforms and offers versions for
    Linux, macOS and Windows, among other operating systems. You can download and
    install this relational database management system from the Download section of
    its web page: [http://www.postgresql.org](http://www.postgresql.org).'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用此示例，您必须下载并安装 PostgreSQL，如果您尚未在您的开发计算机或开发服务器上运行它。PostgreSQL 在多个平台上可用，并提供
    Linux、macOS 和 Windows 等操作系统的版本。您可以从其网页的下载部分下载并安装此关系型数据库管理系统：[http://www.postgresql.org](http://www.postgresql.org)。
- en: The next samples that work with a PostgreSQL database have been tested in PostgreSQL
    versions 9.6.x and PostgreSQL 10.x. Make sure you work with any of these versions.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 与 PostgreSQL 数据库兼容的下一个样本已在 PostgreSQL 版本 9.6.x 和 PostgreSQL 10.x 中进行了测试。请确保您使用这些版本中的任何一个。
- en: 'There are interactive installers built by EnterpriseDB and BigSQL for macOS
    and Windows. In case you are working with macOS, Postgres.app provides a really
    easy way to install and use PostgreSQL on this operating system. You can read
    more about Postgres.app and download it from its web page: [http://postgresapp.com](http://postgresapp.com).'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: EnterpriseDB 和 BigSQL 为 macOS 和 Windows 构建了交互式安装程序。如果您在 macOS 上工作，Postgres.app
    提供了一种非常简单的方法来安装和使用 PostgreSQL。您可以在其网页上了解更多关于 Postgres.app 的信息并下载它：[http://postgresapp.com](http://postgresapp.com)。
- en: After you finish the installation process, you have to make sure that the PostgreSQL
    `bin` folder is included in the PATH environmental variable. You should be able
    to execute the psql command-line utility from your current Linux or macOS terminal,
    the Windows command prompt, or Windows PowerShell.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 完成安装过程后，您必须确保 PostgreSQL 的 `bin` 文件夹包含在 PATH 环境变量中。您应该能够从当前的 Linux 或 macOS 终端、Windows
    命令提示符或 Windows PowerShell 中执行 psql 命令行实用程序。
- en: In case the `bin` folder isn't included in the PATH, you will receive an error
    indicating that the `pg_config` file cannot be found when trying to install the
    psycopg2 Python package. In addition, you will have to use the full path to each
    of the PostgreSQL command-line tools that we will use in the next steps.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `bin` 文件夹未包含在 PATH 中，您将在尝试安装 psycopg2 Python 包时收到错误，指示找不到 `pg_config` 文件。此外，您还必须使用我们将要使用的每个
    PostgreSQL 命令行工具的完整路径。
- en: Running migrations that generate relationships
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行生成关系的迁移
- en: We must create the initial migration for the new models we recently coded. We
    just need to run the following Python scripts and we will also synchronize the
    database for the first time. As we learned from our previous RESTful Web Service
    sample, by default, Django uses an SQLite database.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须为最近编写的新的模型创建初始迁移。我们只需运行以下 Python 脚本，我们还将首次同步数据库。正如我们从之前的 RESTful Web 服务示例中学到的那样，默认情况下，Django
    使用 SQLite 数据库。
- en: In this new example, we will be working with a PostgreSQL database. However,
    in case you want to use an SQLite, you can skip all the next steps related to
    PostgreSQL, its configuration in Django, and jump to the migrations generation
    command. You will also have to use the SQLite utilities instead of the PostgreSQL
    tools to analyze the database.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个新示例中，我们将使用 PostgreSQL 数据库。但是，如果您想使用 SQLite，您可以跳过所有与 PostgreSQL、Django 中的配置相关的下一步，直接跳转到迁移生成命令。您还必须使用
    SQLite 工具而不是 PostgreSQL 工具来分析数据库。
- en: We will use the PostgreSQL command-line tools to create a new database named
    `toys`. In case you already have a PostgreSQL database with this name, make sure
    that you use another name in all the commands and configurations. You can perform
    the same tasks with any PostgreSQL GUI tool or any database administration tool
    that supports PostgreSQL.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 PostgreSQL 命令行工具创建一个名为 `toys` 的新数据库。如果您已经有一个同名 PostgreSQL 数据库，请确保在所有命令和配置中使用另一个名称。您可以使用任何
    PostgreSQL GUI 工具或支持 PostgreSQL 的任何数据库管理工具执行相同的任务。
- en: 'In case you are developing in Linux, it is necessary to run the commands as
    the `postgres` user. Run the following command in Windows or macOS to create a
    new database named `drones`. Notice that the command won''t produce any output
    and that you must have the `bin` folder for PostgreSQL command-line tools in your
    path:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在 Linux 上开发，必须以 `postgres` 用户身份运行命令。在 Windows 或 macOS 上运行以下命令以创建一个名为 `drones`
    的新数据库。请注意，该命令不会产生任何输出，并且您必须在您的路径中具有 PostgreSQL 命令行工具的 `bin` 文件夹：
- en: '[PRE13]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In Linux, run the following command to use the `postgres` user:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 中，运行以下命令以使用 `postgres` 用户：
- en: '[PRE14]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, we will use the psql command-line tool to run some SQL statements to create
    a specific user that we will use in Django and assign the necessary roles for
    it. In Windows or macOS, run the following command to launch the psql tool:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用 psql 命令行工具运行一些 SQL 语句来创建一个特定的用户，我们将在 Django 中使用该用户，并为其分配必要的角色。在 Windows
    或 macOS 中，运行以下命令以启动 psql 工具：
- en: '[PRE15]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In macOS, you might need to run the following command to launch psql with the
    `postgres` user in case the previous command doesn''t work, as it will depend
    on the way in which you installed and configured PostgreSQL:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 中，如果之前的命令不起作用，你可能需要运行以下命令以使用 `postgres` 用户启动 psql，因为它将取决于你安装和配置 PostgreSQL
    的方式：
- en: '[PRE16]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In Linux, run the following command to start psql with the `postgres` user:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 中，运行以下命令以使用 `postgres` 用户启动 psql：
- en: '[PRE17]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Then, run the following SQL statements and finally enter `\q` to exit the psql
    command-line tool.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行以下 SQL 语句，最后输入 `\q` 以退出 psql 命令行工具。
- en: Replace the username with your desired username to use in the new database,
    and password with your chosen password. We will specify the selected username
    and password in the Django settings for our web service.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 将用户名替换为你希望在新的数据库中使用的用户名，将密码替换为你选择的密码。我们将在我们的网络服务的 Django 设置中指定所选的用户名和密码。
- en: 'You don''t need to run the steps in case you are already working with a specific
    user in PostgreSQL and you have already granted privileges to the database for
    the user:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经在 PostgreSQL 中与特定用户一起工作，并且已经为该用户授予了数据库的权限，那么你不需要运行以下步骤：
- en: '[PRE18]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You will see the following output for the previous commands:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 对于之前的命令，你会看到以下输出：
- en: '[PRE19]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The default SQLite database engine and the database file name are specified
    in the `restful01/settings.py` Python file. The following lines show the default
    lines that configure the database:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 默认 SQLite 数据库引擎和数据库文件名在 `restful01/settings.py` Python 文件中指定。以下行显示了配置数据库的默认行：
- en: '[PRE20]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We will work with PostgreSQL instead of SQLite for this example, and therefore,
    we must replace the declaration of the `DATABASES` dictionary with the following
    lines. The nested dictionary maps the database named `default` with the `django.db.backends.postgresql`
    database engine, the desired database name and its settings. In this case, we
    will create a database named `drones`. Make sure you specify the desired database
    name in the value for the `''NAME''` key and that you configure the user, password,
    host, and port based on your PostgreSQL configuration. In case you followed the
    previously explained steps to configure the PostgreSQL database, use the settings
    specified in these steps. The code file for the sample is included in the `hillar_django_restful_06_01`
    folder, in the `restful01/settings.py` file:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用 PostgreSQL 而不是 SQLite，因此，我们必须用以下行替换 `DATABASES` 字典的声明。嵌套字典将名为 `default`
    的数据库映射到 `django.db.backends.postgresql` 数据库引擎、所需的数据库名称及其设置。在这种情况下，我们将创建一个名为 `drones`
    的数据库。确保你在 `'NAME'` 键的值中指定所需的数据库名称，并根据你的 PostgreSQL 配置配置用户、密码、主机和端口。如果你遵循了之前解释的步骤来配置
    PostgreSQL 数据库，请使用这些步骤中指定的设置。示例代码文件包含在 `hillar_django_restful_06_01` 文件夹中的 `restful01/settings.py`
    文件中：
- en: '[PRE21]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In case you decided to continue working with SQLite, you don't need to make
    the previous changes and you can continue using the default configuration.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定继续使用 SQLite，你不需要进行之前的更改，可以直接继续使用默认配置。
- en: 'We don''t want the migrations process to take into account our models related
    to toys from the previous web service, and therefore, we will make changes to
    the code in the `urls.py` file in the `restful01` folder, specifically, the `restful01/urls.py`
    file. The file defines the root URL configurations, and therefore, we must remove
    the URL patterns declared in the `toys/urls.py` file. The following lines show
    the new code for the `restful01/urls.py` file. The code file for the sample is
    included in the `hillar_django_restful_06_01` folder, in the `restful01/urls.py`
    file:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望迁移过程考虑我们与之前网络服务中的玩具相关的模型，因此，我们将对 `restful01` 文件夹中的 `urls.py` 文件中的代码进行更改，特别是
    `restful01/urls.py` 文件。该文件定义了根 URL 配置，因此，我们必须删除在 `toys/urls.py` 文件中声明的 URL 模式。以下行显示了
    `restful01/urls.py` 文件的新代码。示例代码文件包含在 `hillar_django_restful_06_01` 文件夹中的 `restful01/urls.py`
    文件中：
- en: '[PRE22]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In order to use PostgreSQL, it is necessary to install a Python-PostgreSQL
    Database Adapter that Django will use to interact with a PostgreSQL database:
    the Psycopg2 package (psycopg2).'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 PostgreSQL，需要安装一个 Django 将用于与 PostgreSQL 数据库交互的 Python-PostgreSQL 数据库适配器：Psycopg2
    包（psycopg2）。
- en: 'In macOS, we have to make sure that the PostgreSQL `bin` folder is included
    in the `PATH` environmental variable. For example, in case the path to the `bin`
    folder is `/Applications/Postgres.app/Contents/Versions/latest/bin`, we must execute
    the following command to add this folder to the `PATH` environmental variable:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 上，我们必须确保 PostgreSQL 的 `bin` 文件夹已包含在 `PATH` 环境变量中。例如，如果 `bin` 文件夹的路径是
    `/Applications/Postgres.app/Contents/Versions/latest/bin`，我们必须执行以下命令将此文件夹添加到 `PATH`
    环境变量中：
- en: '[PRE23]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Once we make sure that the PostgreSQL `bin` folder is included in the `PATH`
    environmental variable, we just need to run the following command to install this
    package. Make sure the virtual environment is activated before running the command:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们确认 PostgreSQL 的 `bin` 文件夹已包含在 `PATH` 环境变量中，我们只需运行以下命令来安装此包。在运行命令之前，请确保已激活虚拟环境：
- en: '[PRE24]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The last lines for the output will indicate that the psycopg2 package has been
    successfully installed:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的最后几行将指示 psycopg2 包已成功安装：
- en: '[PRE25]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, run the following Python script to generate the migrations that will allow
    us to synchronize the PostgreSQL database for the first time. We will run the
    migrations for the `drones` application:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行以下 Python 脚本来生成允许我们首次同步 PostgreSQL 数据库的迁移。我们将为 `drones` 应用程序运行迁移：
- en: '[PRE26]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The following lines show the output generated after running the previous command:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了运行上一条命令后的输出：
- en: '[PRE27]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The output indicates that the `restful01/drones/migrations/0001_initial.py`
    file includes the code to create the `Competition`, `Drone`, `DroneCategory`,
    and `Pilot` models. The following lines show the code for this file that was automatically
    generated by Django. The code file for the sample is included in the `hillar_django_restful_06_01`
    folder, in the `restful01/drones/migrations/0001_initial.py` file:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 输出指示 `restful01/drones/migrations/0001_initial.py` 文件包含创建 `Competition`、`Drone`、`DroneCategory`
    和 `Pilot` 模型的代码。以下行显示了由 Django 自动生成的此文件的代码。示例的代码文件包含在 `hillar_django_restful_06_01`
    文件夹中的 `restful01/drones/migrations/0001_initial.py` 文件中：
- en: '[PRE28]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The code defines a subclass of the `django.db.migrations.Migration` class named
    `Migration` that defines an `operations` list with many calls to `migrations.CreateModel`.
    Each `migrations.CreateModel` call will create the table for each of the related
    models.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 代码定义了一个名为 `Migration` 的 `django.db.migrations.Migration` 类的子类，该类定义了一个包含许多对 `migrations.CreateModel`
    调用的 `operations` 列表。每个 `migrations.CreateModel` 调用将为每个相关模型创建一个表。
- en: 'Notice that Django has automatically added an `id` field for each of the models.
    The `operations` are executed in the same order in which they are displayed in
    the list. The code creates `Competition`, `Drone`, `DroneCategory`, `Pilot` and
    finally adds the following fields with foreign keys:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Django 已经自动为每个模型添加了一个 `id` 字段。操作以列表中显示的顺序执行。代码创建了 `Competition`、`Drone`、`DroneCategory`、`Pilot`，并最终添加了以下具有外键的字段：
- en: The `drone_category` field to the `Drone` model with the foreign key to the
    `DroneCategory` model
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `drone_category` 字段与 `Drone` 模型通过外键关联到 `DroneCategory` 模型
- en: The `drone` field to the `Competition` model with the foreign key to the `Drone`
    model
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`drone`字段与`Competition`模型通过外键关联到`Drone`模型
- en: The `pilot` field to the `Competition` model with the foreign key to the `Pilot`
    model
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `pilot` 字段与 `Competition` 模型通过外键关联到 `Pilot` 模型
- en: 'Now, run the following python script to apply all the generated migrations:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行以下 Python 脚本来应用所有生成的迁移：
- en: '[PRE29]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following lines show the output generated after running the previous command:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了运行上一条命令后的输出：
- en: '[PRE30]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Analyzing the database
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析数据库
- en: After we have run the previous command, we can use the PostgreSQL command-line
    tools or any other application that allows us to easily check the contents of
    a PostreSQL database, to check the tables that Django generated. **If you decided
    to continue working with SQLite, we already learned how to check the tables in
    the previous chapters.**
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行上一条命令后，我们可以使用 PostgreSQL 命令行工具或任何允许我们轻松检查 PostgreSQL 数据库内容的其他应用程序，以检查 Django
    生成的表。**如果您决定继续使用 SQLite，我们已经在之前的章节中学习了如何检查表。**
- en: 'Run the following command to list the generated tables:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以列出生成的表：
- en: '[PRE31]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The following lines show the output with all the generated table names:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了所有生成的表名的输出：
- en: '[PRE32]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In our previous example, Django used the `toys_` prefix for the table related
    to the `toys` application we had created. In this case, the application name is
    `drones`, and therefore, Django uses the `drones_` prefix for the following four
    tables that are related to the application:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的示例中，Django 使用了 `toys_` 前缀来表示我们创建的 `toys` 应用程序相关的表。在这种情况下，应用程序名称是 `drones`，因此
    Django 使用 `drones_` 前缀来表示与该应用程序相关的以下四个表：
- en: '`drones_drone`: This table persists the `Drone` model'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drones_drone`：此表持久化 `Drone` 模型'
- en: '`drones_dronecategory`: This table persists the `DroneCategory` model'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drones_dronecategory`：此表持久化 `DroneCategory` 模型'
- en: '`drones_pilot`: This table persists the `Pilot` model'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drones_pilot`：此表持久化 `Pilot` 模型'
- en: '`drones_competition`: This table persists the `Competition` model'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drones_competition`：此表持久化 `Competition` 模型'
- en: Django's integrated ORM generated these tables and the foreign keys based on
    the information included in our models and the code generated during the migrations
    process.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Django 的集成 ORM 根据我们模型中包含的信息和迁移过程中生成的代码，根据信息生成了这些表和外键。
- en: 'The following commands will allow you to check the contents of the four tables
    after we compose and send different HTTP requests to the RESTful Web Service,
    and these calls end up making CRUD operations to the four tables. The commands
    assume that you are running PostgreSQL on the same computer in which you are running
    the command:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将在我们向 RESTful Web 服务发送不同的 HTTP 请求并执行 CRUD 操作到四个表之后，允许您检查这四个表的内容。这些命令假设您在运行命令的同一台计算机上运行
    PostgreSQL：
- en: '[PRE33]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Instead of working with the PostgreSQL command-line utility, you can use a GUI
    tool to check the contents of the PostgreSQL database. You can use also the database
    tools included in your favorite IDE to check the contents for the SQLite database.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用 PostgreSQL 命令行工具相比，您可以使用图形用户界面工具来检查 PostgreSQL 数据库的内容。您还可以使用您喜欢的 IDE 中包含的数据库工具来检查
    SQLite 数据库的内容。
- en: As happened in our previous example, Django generated additional tables that
    it requires to support the web framework and the authentication features that
    we will use later.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如同我们之前的示例中发生的那样，Django 生成了它支持 Web 框架和我们将要使用的身份验证功能所需的额外表。
- en: Configuring serialization and deserialization with relationships
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置具有关系的序列化和反序列化
- en: The new RESTful Web Service must be able to serialize the `DroneCategory`, `Drone`,
    `Pilot`, and `Competition` instances into JSON representations and vice versa.
    In this case, we must pay special attention to the relationships between the different
    models when we create the serializer classes to manage serialization to JSON and
    deserialization from JSON.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 RESTful Web 服务必须能够将 `DroneCategory`、`Drone`、`Pilot` 和 `Competition` 实例序列化为
    JSON 表示形式，反之亦然。在这种情况下，我们必须在创建序列化器类以管理 JSON 序列化和 JSON 反序列化时，特别注意不同模型之间的关系。
- en: In our last version of the previous RESTful Web Service, we created a subclass
    of the `rest_framework.serializers.ModelSerializer` class to make it easier to
    generate a serializer and reduce boilerplate code. In this case, we will also
    declare one class that inherits from `ModelSerializer`. The other three classes
    will inherit from the `rest_framework.serializers.HyperlinkedModelSerializer`
    class.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前版本的 RESTful Web 服务中，我们创建了一个 `rest_framework.serializers.ModelSerializer`
    类的子类，以使其更容易生成序列化器并减少样板代码。在这种情况下，我们也将声明一个继承自 `ModelSerializer` 的类。其他三个类将继承自 `rest_framework.serializers.HyperlinkedModelSerializer`
    类。
- en: The `HyperlinkedModelSerializer` is a type of `ModelSerializer` that uses hyperlinked
    relationships instead of primary key relationships, and therefore, it represents
    the relationships to other model instances with hyperlinks instead of primary
    key values. In addition, the `HyperlinkedModelSerializer` generates a field named
    `url` with the URL for the resource as its value. As happens with `ModelSerializer`,
    the `HyperlinkedModelSerializer` class provides default implementations for the
    `create` and `update` methods.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`HyperlinkedModelSerializer` 是一种使用超链接关系而不是主键关系来代替的 `ModelSerializer` 类型，因此它使用超链接而不是主键值来表示与其他模型实例的关系。此外，`HyperlinkedModelSerializer`
    生成一个名为 `url` 的字段，其值为资源的 URL。与 `ModelSerializer` 一样，`HyperlinkedModelSerializer`
    类为 `create` 和 `update` 方法提供了默认实现。'
- en: 'Now, go to the `restful01/drones` folder and create a new Python code file
    named `serializers.py`. The following lines show the code that declares the new
    `DroneCategorySerializer` class. Notice that we will add more classes to this
    file later. The code file for the sample is included in the `hillar_django_restful_06_01`
    folder in the `restful01/drones/serializers.py` file:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，转到`restful01/drones`文件夹，并创建一个名为`serializers.py`的新Python代码文件。以下行显示了声明新`DroneCategorySerializer`类的代码。请注意，我们稍后还会向此文件添加更多类。示例代码文件包含在`hillar_django_restful_06_01`文件夹中的`restful01/drones/serializers.py`文件中：
- en: '[PRE34]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The `DroneCategorySerializer` class is a subclass of the `HyperlinkedModelSerializer`
    class. The `DroneCategorySerializer` class declares a `drones` attribute that
    holds an instance of `serializers.HyperlinkedRelatedField` with `many` and `read_only`
    equal to `True`. This way, the code defines a one-to-many relationship that is
    read-only.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`DroneCategorySerializer`类是`HyperlinkedModelSerializer`类的子类。`DroneCategorySerializer`类声明了一个`drones`属性，该属性包含一个`serializers.HyperlinkedRelatedField`实例，其中`many`和`read_only`都设置为`True`。这样，代码定义了一个只读的一对多关系。'
- en: The code uses the `drones` name that we specified as the `related_name` string
    value when we created the `drone_category` field as a `models.ForeignKey` instance
    in the `Drone` model. This way, the `drones` field will provide us with an array
    of hyperlinks to each drone that belongs to the drone category.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 代码使用了我们在创建`Drone`模型中的`drone_category`字段作为`models.ForeignKey`实例时指定的`related_name`字符串值`drones`。这样，`drones`字段将为我们提供指向属于该无人机类别的每个无人机的超链接数组。
- en: The `view_name` value is `'drone-detail'` to indicate the browsable API feature
    to use the drone detail view to render the hyperlink when the user clicks or taps
    on it. This way, we make it possible for the browsable API to allow us to browse
    between related models.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`view_name`的值是`''drone-detail''`，以指示可浏览API功能使用无人机详情视图来渲染超链接，当用户点击或轻触时。这样，我们使可浏览API能够允许我们在相关模型之间进行浏览。'
- en: 'The `DroneCategorySerializer` class declares a `Meta` inner class that declares
    the following two attributes:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`DroneCategorySerializer`类声明了一个`Meta`内部类，该类声明了以下两个属性：'
- en: '`model`: This attribute specifies the model related to the serializer, that
    is, the `DroneCategory` class.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model`：此属性指定与序列化器相关的模型，即`DroneCategory`类。'
- en: '`fields`: This attribute specifies a tuple of string whose values indicate
    the field names that we want to include in the serialization from the model related
    to the serializer, that is, the `DroneCategory` class. We want to include both
    the primary key and the URL, and therefore, the code specified both `''pk''` and
    `''url''` as members of the tuple. In addition, we want to include the name and
    the field that provides hyperlinks to each drone that belongs to the drone category.
    Thus, the code also specifies `''name''` and `''drones''` as members of the tuple.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields`：此属性指定一个字符串值的元组，其值指示我们想要包含在序列化中的字段名称，即与序列化器相关的模型，即`DroneCategory`类。我们希望包含主键和URL，因此代码指定了元组的成员`''pk''`和`''url''`。此外，我们还想包含名称和提供指向属于无人机类别的每个无人机的超链接的字段。因此，代码还指定了元组的成员`''name''`和`''drones''`。'
- en: There is no need to override either the `create` or `update` methods because
    the generic behavior will be enough in this case. The `HyperlinkedModelSerializer`
    superclass provides implementations for both methods.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在此情况下，无需重写`create`或`update`方法，因为通用的行为将足够。`HyperlinkedModelSerializer`超类为这两个方法提供了实现。
- en: Defining hyperlinks with serializers.HyperlinkedModelSerializer
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`serializers.HyperlinkedModelSerializer`定义超链接
- en: 'Now, add the following code to the `serializers.py` file to declare the `DroneSerializer`
    class. The code file for the sample is included in the `hillar_django_restful_06_01`
    folder in the `restful01/drones/serializers.py` file:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将以下代码添加到`serializers.py`文件中，以声明`DroneSerializer`类。示例代码文件包含在`restful01/drones/serializers.py`文件中的`hillar_django_restful_06_01`文件夹中：
- en: '[PRE35]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The `DroneSerializer` class is a subclass of the `HyperlinkedModelSerializer`
    class. The `DroneSerializer` class declares a `drone_category` attribute that
    holds an instance of `serializers.SlugRelatedField` with its `queryset` argument
    set to `DroneCategory.objects.all()` and its `slug_field` argument set to `'name'`.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`DroneSerializer`类是`HyperlinkedModelSerializer`类的子类。`DroneSerializer`类声明了一个`drone_category`属性，该属性包含一个`serializers.SlugRelatedField`实例，其`queryset`参数设置为`DroneCategory.objects.all()`，其`slug_field`参数设置为`''name''`。'
- en: A `SlugRelatedField` is a read-write field that represents the target of the
    relationship by a unique slug attribute, that is, the description. In the Drone
    model, we created the `drone_category` field as a `models.ForeignKey` instance.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`SlugRelatedField`是一个读写字段，它通过唯一的slug属性（即描述）表示关系的目标。在Drone模型中，我们将`drone_category`字段创建为`models.ForeignKey`实例。'
- en: We want to display the drone category name as the description (slug field) for
    the related `DroneCategory`, and therefore, we specified `'name'` as the value
    for the `slug_field` argument. The browsable API has to display the possible options
    for the related drone category in a dropdown field in a form, and Django will
    use the expression specified in the `queryset` argument to retrieve all the possible
    instances and display their specified slug field.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将无人机类别名称作为相关`DroneCategory`的描述（slug字段），因此我们将`'name'`指定为`slug_field`参数的值。可浏览的API必须在表单中的下拉字段中显示相关无人机类别的可能选项，Django将使用在`queryset`参数中指定的表达式检索所有可能的实例并显示它们的指定slug字段。
- en: 'The `DroneSerializer` class declares a `Meta` inner class that declares two
    attributes:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`DroneSerializer`类声明了一个`Meta`内部类，该类声明了两个属性：'
- en: '`model`: The `Drone` class.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model`: `Drone`类。'
- en: '`fields`. In this case, we don''t want to include the primary key, and therefore,
    the tuple doesn''t include the `''pk''` string. The `drone_category` field will
    render the `name` field for the related `DroneCategory`.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields`。在这种情况下，我们不想包含主键，因此元组中不包含`''pk''`字符串。`drone_category`字段将渲染相关`DroneCategory`的`name`字段。'
- en: Now, add the following code to the `serializers.py` file to declare the `CompetitionSerializer`
    class. The code file for the sample is included in the `hillar_django_restful_06_01`
    folder in the `restful01/drones/serializers.py` file.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将以下代码添加到`serializers.py`文件中，以声明`CompetitionSerializer`类。示例代码文件包含在`restful01/drones/serializers.py`文件中的`hillar_django_restful_06_01`文件夹内。
- en: '[PRE36]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `CompetitionSerializer` class is a subclass of the `HyperlinkedModelSerializer`
    class. We will use the `CompetitionSerializer` class to serialize `Competition`
    instances related to a `Pilot`, that is, to display all the competitions in which
    a specific `Pilot` has participated when we serialize a `Pilot`. We want to display
    all the details for the related `Drone`, but we don't include the related `Pilot`
    because the `Pilot` will use this `CompetitionSerializer` serializer.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`CompetitionSerializer`类是`HyperlinkedModelSerializer`类的子类。我们将使用`CompetitionSerializer`类来序列化与`Pilot`相关的`Competition`实例，即在我们序列化`Pilot`时显示特定`Pilot`参加的所有比赛。我们希望显示相关`Drone`的所有详细信息，但不包括相关的`Pilot`，因为`Pilot`将使用此`CompetitionSerializer`序列化器。'
- en: The `CompetitionSerializer` class declares a `drone` attribute that holds an
    instance of the previously coded `DroneSerializer` class. We created the `drone`
    field as a `models.ForeignKey` instance in the `Competition` model and we want
    to serialize the same data for the drone that we coded in the `DroneSerializer`
    class.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`CompetitionSerializer`类声明了一个`drone`属性，该属性包含之前编码的`DroneSerializer`类的实例。我们在`Competition`模型中将`drone`字段创建为`models.ForeignKey`实例，并且我们希望序列化与在`DroneSerializer`类中编码的无人机相同的数据。'
- en: 'The `CompetitionSerializer` class declares a `Meta` inner class that declares
    two attributes: `model` and `fields`. The `model` attribute specifies the model
    related to the serializer, that is, the `Competition` class. As previously explained,
    we don''t include the `''Pilot''` field name in the `fields` tuple of string to
    avoid serializing the Pilot again. We will use a `PilotSerializer` as a master
    and the `CompetitionSerializer` as the detail.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`CompetitionSerializer`类声明了一个`Meta`内部类，该类声明了两个属性：`model`和`fields`。`model`属性指定了与序列化器相关的模型，即`Competition`类。如前所述，我们不将`''Pilot''`字段名称包含在`fields`字符串元组中，以避免再次序列化Pilot。我们将使用`PilotSerializer`作为主序列化器，而将`CompetitionSerializer`作为详细序列化器。'
- en: 'Now, add the following code to the `serializers.py` file to declare the `PilotSerializer`
    class. The code file for the sample is included in the `hillar_django_restful_06_01`
    folder in the `restful01/drones/serializers.py` file:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将以下代码添加到`serializers.py`文件中，以声明`PilotSerializer`类。示例代码文件包含在`restful01/drones/serializers.py`文件中的`hillar_django_restful_06_01`文件夹内：
- en: '[PRE37]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `PilotSerializer` class is a subclass of the `HyperlinkedModelSerializer`
    class. We will use the `PilotSerializer` class to serialize `Pilot` instances
    and we will use the perviously coded `CompetitionSerializer` class to serialize
    all the `Competition` instances related to the `Pilot`.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`PilotSerializer` 类是 `HyperlinkedModelSerializer` 类的子类。我们将使用 `PilotSerializer`
    类来序列化 `Pilot` 实例，并使用之前编写的 `CompetitionSerializer` 类来序列化与 `Pilot` 相关的所有 `Competition`
    实例。'
- en: The `PilotSerializer` class declares a `competitions` attribute that holds and
    instance of the previously coded `CompetitionSerializer` class. The `many` argument
    is set to `True` because it is a one-to-many relationship (one `Pilot` has many
    related `Competition` instances).
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`PilotSerializer` 类声明了一个 `competitions` 属性，该属性包含之前编写的 `CompetitionSerializer`
    类的实例。`many` 参数设置为 `True`，因为这是一个一对多关系（一个 `Pilot` 有多个相关的 `Competition` 实例）。'
- en: We use the `competitions` name that we specified as the `related_name` string
    value when we created the `Pilot` field as a `models.ForeignKey` instance in the
    `Competition` model. This way, the `competitions` field will render each `Competition`
    that belongs to the `Pilot` by using the previously declared `CompetitionSerializer`.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在 `Competition` 模型中将 `Pilot` 字段作为 `models.ForeignKey` 实例创建时，我们指定了 `competitions`
    作为 `related_name` 字符串值。这样，`competitions` 字段将通过之前声明的 `CompetitionSerializer` 来渲染属于
    `Pilot` 的每个 `Competition`。
- en: The `Pilot` model declared `gender` as an instance of `models.CharField` with
    the `choices` attribute set to the `Pilot.GENDER_CHOICES` string tuple. The `PilotSerializer`
    class declares a `gender` attribute that holds an instance of `serializers.ChoiceField`
    with the `choices` argument set to the `Pilot.GENDER_CHOICES` string tuple.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`Pilot` 模型将 `gender` 声明为 `models.CharField` 的实例，其 `choices` 属性设置为 `Pilot.GENDER_CHOICES`
    字符串元组。`PilotSerializer` 类声明了一个 `gender` 属性，该属性包含一个 `serializers.ChoiceField` 的实例，其
    `choices` 参数设置为 `Pilot.GENDER_CHOICES` 字符串元组。'
- en: In addition, the class declares a `gender_description` attribute with `read_only`
    set to `True` and the `source` argument set to `'get_gender_display'`. The `source`
    string is built with the `get_` prefix followed by the field name, `gender`, and
    the `_display` suffix. This way, the read-only `gender_description` attribute
    will render the description for the gender choices instead of the single char
    stored values.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，该类声明了一个 `gender_description` 属性，其中 `read_only` 设置为 `True`，`source` 参数设置为
    `'get_gender_display'`。`source` 字符串是通过在字段名称 `gender` 前加上 `get_` 前缀，并在后面加上 `_display`
    后缀来构建的。这样，只读的 `gender_description` 属性将渲染性别选择的描述，而不是存储的单个字符值。
- en: 'The `PilotSerializer` class declares a `Meta` inner class that declares two
    attributes: `model` and `fields`. The `model` attribute specifies the model related
    to the serializer, that is, the `Pilot` class. We will use the `PilotSerializer`
    class as a master and the `CompetitionSerializer` class as the detail. As happened
    with the previous serializers, the fields attribute specifies a tuple of string
    whose values indicate the field names that we want to include in the serialization
    from the related model.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`PilotSerializer` 类声明了一个 `Meta` 内部类，该类声明了两个属性：`model` 和 `fields`。`model` 属性指定了与序列化器相关的模型，即
    `Pilot` 类。我们将使用 `PilotSerializer` 类作为主类，而使用 `CompetitionSerializer` 类作为细节类。与之前的序列化器一样，`fields`
    属性指定了一个字符串元组，其值表示我们想要包含在从相关模型序列化中的字段名称。'
- en: 'Finally, add the following code to the `serializers.py` file to declare the
    `PilotCompetitionSerializer` class. The code file for the sample is included in
    the `hillar_django_restful_06_01` folder in the `restful01/drones/serializers.py`
    file:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将以下代码添加到 `serializers.py` 文件中，以声明 `PilotCompetitionSerializer` 类。示例代码文件包含在
    `restful01/drones/serializers.py` 文件中的 `hillar_django_restful_06_01` 文件夹中：
- en: '[PRE38]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The `PilotCompetitionSerializer` class is a subclass of the `ModelSerializer`
    class. We will use the `CompetitionSerializer` class to serialize `Competition`
    instances. Previously, we created the `CompetitionSerializer` class to serialize
    `Competition` instances as the detail of a `Pilot`. We will use the new `PilotCompetitionSerializer`
    class whenever we want to display the related `Pilot` name and the related `Drone`
    name.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`PilotCompetitionSerializer` 类是 `ModelSerializer` 类的子类。我们将使用 `CompetitionSerializer`
    类来序列化 `Competition` 实例。之前，我们创建了 `CompetitionSerializer` 类来序列化 `Competition` 实例作为
    `Pilot` 的细节。每当我们要显示相关的 `Pilot` 名称和相关的 `Drone` 名称时，我们将使用新的 `PilotCompetitionSerializer`
    类。'
- en: In the other serializer class, the `CompetitionSerializer` class, we didn't
    include any information related to the `Pilot` and we included all the details
    for the drone. This new class is an example of the flexibility that we have when
    we declare more than one serializer for the same model.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个序列化器类`CompetitionSerializer`中，我们没有包含与`Pilot`相关的任何信息，而是包含了有关无人机的所有详细信息。这个新类是我们声明同一模型的多个序列化器时所具有的灵活性的一个例子。
- en: The `PilotCompetitionSerializer` class declares a `pilot` attribute that holds
    an instance of `serializers.SlugRelatedField` with its `queryset` argument set
    to `Pilot.objects.all()` and its `slug_field` argument set to `'name'`. We created
    the `pilot` field as a `models.ForeignKey` instance in the `Competition` model
    and we want to display the Pilot's name as the description (slug field) for the
    related `Pilot`. Thus, we specified `'name'` as the `slug_field`. When the browsable
    API has to display the possible options for the related pilot in a dropdown in
    a form, Django will use the expression specified in the `queryset` argument to
    retrieve all the possible pilots and display their specified slug field.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`PilotCompetitionSerializer`类声明了一个`pilot`属性，该属性包含一个`serializers.SlugRelatedField`实例，其`queryset`参数设置为`Pilot.objects.all()`，其`slug_field`参数设置为`''name''`。我们在`Competition`模型中创建了一个`pilot`字段作为`models.ForeignKey`实例，我们希望将飞行员的名字作为相关`Pilot`的描述（slug字段）。因此，我们指定了`''name''`作为`slug_field`。当可浏览的API需要在表单中的下拉列表中显示相关飞行员的可能选项时，Django将使用在`queryset`参数中指定的表达式检索所有可能的飞行员并显示它们指定的slug字段。'
- en: The `PilotCompetitionSerializer` class declares a `drone` attribute that holds
    an instance of `serializers.SlugRelatedField` with its `queryset` argument set
    to `Drone.objects.all()` and its `slug_field` argument set to `'name'`. We created
    the `drone` field as a `models.ForeignKey` instance in the `Competition` model
    and we want to display the drone's name as the description (slug field) for the
    related `Drone`.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`PilotCompetitionSerializer`类声明了一个`drone`属性，该属性包含一个`serializers.SlugRelatedField`实例，其`queryset`参数设置为`Drone.objects.all()`，其`slug_field`参数设置为`''name''`。我们在`Competition`模型中创建了一个`drone`字段作为`models.ForeignKey`实例，我们希望将无人机名称作为相关`Drone`的描述（slug字段）。 '
- en: 'We have coded all the necessary serializers for our new RESTful Web Service.
    The following table summarizes the serializers we have. Notice that we have two
    different serializers for the `Competition` model:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为我们的新RESTful Web Service编写了所有必要的序列化器。以下表格总结了我们所拥有的序列化器。请注意，我们为`Competition`模型有两个不同的序列化器：
- en: '| **Serializer class name** | **Superclass** | **Related model** |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| **序列化器类名称** | **超类** | **相关模型** |'
- en: '| `DroneCategorySerializer` | `HyperlinkedModelSerializer` | `DroneCategory`
    |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| `DroneCategorySerializer` | `HyperlinkedModelSerializer` | `DroneCategory`
    |'
- en: '| `DroneSerializer` | `HyperlinkedModelSerializer` | `Drone` |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| `DroneSerializer` | `HyperlinkedModelSerializer` | `Drone` |'
- en: '| `CompetitionSerializer` | `HyperlinkedModelSerializer` | `Competition` |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| `CompetitionSerializer` | `HyperlinkedModelSerializer` | `Competition` |'
- en: '| `PilotSerializer` | `HyperlinkedModelSerializer` | `Pilot` |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| `PilotSerializer` | `HyperlinkedModelSerializer` | `Pilot` |'
- en: '| `PilotCompetitionSerializer` | `ModelSerializer` | `Competition` |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| `PilotCompetitionSerializer` | `ModelSerializer` | `Competition` |'
- en: Working with class-based views
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用基于类的视图
- en: We will write our RESTful Web Service by coding class-based views. We will take
    advantage of a set of generic views that we can use as our base classes for our
    class-based views to reduce the required code to the minimum and reuse the behavior
    that has been generalized in the Django REST framework.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过编写基于类的视图来编写我们的RESTful Web Service。我们将利用一组通用视图，这些视图可以作为我们基于类的视图的基础类，以将所需的代码量减少到最小并重用Django
    REST框架中已泛化的行为。
- en: 'We will create subclasses of the two following generic class views declared
    in the `rest_framework.generics` module:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建`rest_framework.generics`模块中声明的两个以下通用类视图的子类：
- en: '`ListCreateAPIView`: This class view implements the `get` method that retrieves
    a listing of a queryset and the `post` method that creates a model instance'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListCreateAPIView`：此类视图实现了`get`方法，用于检索查询集的列表，以及`post`方法，用于创建模型实例'
- en: '`RetrieveUpdateDestroyAPIView`: This class view implements the `get`, `delete`,
    `put`, and `patch` methods to retrieve, delete, completely update, or partially
    update a model instance'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RetrieveUpdateDestroyAPIView`：此类视图实现了`get`、`delete`、`put`和`patch`方法，用于检索、删除、完全更新或部分更新模型实例'
- en: Those two generic views are composed by combining reusable bits of behavior
    in the Django REST framework implemented as mixin classes declared in the `rest_framework.mixins`
    module. We can create a class that uses multiple inheritance and combine the features
    provided by many of these mixin classes.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个通用视图是通过组合在`rest_framework.mixins`模块中声明的 mixin 类中实现的可重用行为来构成的。我们可以创建一个使用多重继承的类，并组合许多这些
    mixin 类提供的功能。
- en: 'The following line shows the declaration of the `ListCreateAPIView` class as
    the composition of `ListModelMixin`, `CreateModelMixin`, and `rest_framework.generics.GenericAPIView`:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了`ListCreateAPIView`类的声明，该类由`ListModelMixin`、`CreateModelMixin`和`rest_framework.generics.GenericAPIView`组成：
- en: '[PRE39]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The following line shows the declaration of the `RetrieveUpdateDestroyAPIView`
    class as the composition of `RetrieveModelMixin`, `UpdateModelMixin`, `DestroyModelMixin`,
    and `rest_framework.generics.GenericAPIView`:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了`RetrieveUpdateDestroyAPIView`类的声明，该类由`RetrieveModelMixin`、`UpdateModelMixin`、`DestroyModelMixin`和`rest_framework.generics.GenericAPIView`组成：
- en: '[PRE40]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Taking advantage of generic classes and viewsets
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用通用类和视图集的优势
- en: Now, we will create many Django class-based views that will use the previously
    explained generic classes combined with the serializer classes to return JSON
    representations for each HTTP request that our RESTful Web Service will handle.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建许多 Django 基于类的视图，这些视图将使用之前解释的通用类，并结合序列化器类，为我们的 RESTful 网络服务处理的每个 HTTP
    请求返回 JSON 表示形式。
- en: We will just have to specify a queryset that retrieves all the objects in the
    `queryset` attribute and the serializer class in the `serializer_class` attribute
    for each subclass that we declare. The behavior coded in the generic classes will
    do the rest for us. In addition, we will declare a `name` attribute with the string
    name we will use to identify the view.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需指定一个查询集，该查询集检索`queryset`属性中的所有对象，并为每个声明的子类指定`serializer_class`属性中的序列化器类。通用类中编码的行为将为我们完成剩余的工作。此外，我们将声明一个`name`属性，使用该字符串名称来识别视图。
- en: 'Go to the `restful01/drones` folder and open the `views.py` file. Replace the
    code in this file with the following code that declares the required imports and
    the class-based views for our web service. We will add more classes to this file
    later. The code file for the sample is included in the `hillar_django_restful_06_01`
    folder in the `restful01/drones/views.py` file:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 前往`restful01/drones`文件夹并打开`views.py`文件。将此文件中的代码替换为以下代码，该代码声明了所需的导入和基于类的视图，用于我们的网络服务。我们稍后将在该文件中添加更多类。示例代码文件包含在`hillar_django_restful_06_01`文件夹中的`restful01/drones/views.py`文件中：
- en: '[PRE41]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Generalizing and mixing behavior
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通用化和混合行为
- en: 'The previous classes took advantage of generalized behavior. Each of the superclasses
    for the classes mixed different generalized behaviors. The following table summarizes
    the HTTP verbs that each class-based view is going to process and the scope to
    which it applies. Notice that we can execute the `OPTIONS` HTTP verb on any of
    the scopes:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的类利用了通用行为。每个混合类的超类混合了不同的通用行为。以下表格总结了每个基于类的视图将要处理的 HTTP 动词及其适用的范围。请注意，我们可以在任何范围内执行
    `OPTIONS` HTTP 动词：
- en: '| **Scope** | **Class-based view name** | **HTTP verbs that it will process**
    |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| **范围** | **基于类的视图名称** | **它将处理的 HTTP 动词** |'
- en: '| Collection of drone categories: `/drone-categories/` | `DroneCategoryList`
    | GET, POST, and OPTIONS |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| 无人机类别集合：`/drone-categories/` | `DroneCategoryList` | GET, POST 和 OPTIONS
    |'
- en: '| Drone category: /drone-`category/{id}` | `DroneCategoryDetail` | GET, PUT,
    PATCH, DELETE, and OPTIONS |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| 无人机类别：`/drone-category/{id}` | `DroneCategoryDetail` | GET, PUT, PATCH, DELETE
    和 OPTIONS |'
- en: '| Collection of drones: `/drones/` | `DroneList` | GET, POST, and OPTIONS |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| 无人机集合：`/drones/` | `DroneList` | GET, POST 和 OPTIONS |'
- en: '| Drone: `/drone/{id`} | `DroneDetail` | GET, PUT, PATCH, DELETE, and OPTIONS
    |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| 无人机：`/drone/{id}` | `DroneDetail` | GET, PUT, PATCH, DELETE 和 OPTIONS |'
- en: '| Collection of Pilots: `/pilots/` | `PilotList` | GET, POST and OPTIONS |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| 飞行员集合：`/pilots/` | `PilotList` | GET, POST 和 OPTIONS |'
- en: '| Pilot: `/Pilot/{id}` | `PilotDetail` | GET, PUT, PATCH, DELETE and OPTIONS
    |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| 飞行员：`/Pilot/{id}` | `PilotDetail` | GET, PUT, PATCH, DELETE 和 OPTIONS |'
- en: '| Collection of competitions: `/competitions/` | `CompetitionList` | GET, POST
    and OPTIONS |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| 竞赛集合：`/competitions/` | `CompetitionList` | GET, POST 和 OPTIONS |'
- en: '| Score: `/competition/{id}` | `CompetitionDetail` | GET, PUT, PATCH, DELETE
    and OPTIONS |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| 分数：`/competition/{id}` | `CompetitionDetail` | GET, PUT, PATCH, DELETE 和
    OPTIONS |'
- en: Working with routing and endpoints
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用路由和端点工作
- en: 'We want to create an endpoint for the root of our web service to make it easy
    to browse the resource collections and resources provided by our web service with
    the browsable API feature and understand how everything works. Add the following
    code to the `views.py` file in the `restful01/drones` folder to declare the `ApiRoot`
    class as a subclass of the `generics.GenericAPIView` class. The code file for
    the sample is included in the `hillar_django_restful_06_01` folder in the `restful01/drones/views.py`
    file:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望为我们的网络服务的根创建一个端点，以便通过可浏览的API功能轻松浏览我们的网络服务提供的资源集合和资源，并了解一切是如何工作的。将以下代码添加到`restful01/drones`文件夹中的`views.py`文件中，以将`ApiRoot`类声明为`generics.GenericAPIView`类的子类。示例的代码文件包含在`hillar_django_restful_06_01`文件夹中的`restful01/drones/views.py`文件内：
- en: '[PRE42]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The `ApiRoot` class is a subclass of the `rest_framework.generics.GenericAPIView`
    class and declares the `get` method. The `GenericAPIView` class is the base class
    for all the other generic views we have previousy analyzed.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`ApiRoot`类是`rest_framework.generics.GenericAPIView`类的子类，并声明了`get`方法。`GenericAPIView`类是我们之前分析过的所有其他通用视图的基类。'
- en: The `ApiRoot` class defines the `get` method that returns a `Response` object
    with key/value pairs of strings that provide a descriptive name for the view and
    its URL, generated with the `rest_framework.reverse.reverse` function. This URL
    resolver function returns a fully qualified URL for the view.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`ApiRoot`类定义了`get`方法，该方法返回一个包含字符串键/值对的`Response`对象，这些字符串提供了视图及其URL的描述性名称，该URL是通过`rest_framework.reverse.reverse`函数生成的。此URL解析函数返回视图的完全限定URL。'
- en: Go to the `restful01/drones` folder and create a new file named `urls.py`. Write
    the following code in this new file. The following lines show the code for this
    file that defines the URL patterns that specifies the regular expressions that
    have to be matched in the request to run a specific method for a class-based view
    defined in the `views.py` file.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 前往`restful01/drones`文件夹，并创建一个名为`urls.py`的新文件。在这个新文件中编写以下代码。以下行显示了此文件的代码，该代码定义了URL模式，该模式指定了请求中必须匹配的正则表达式，以运行在`views.py`文件中定义的基于类的视图的特定方法。
- en: 'In the previous example, we specified a function that represented a view. In
    this case, we call the `as_view` method for each appropriate class-based view.
    The code file for the sample is included in the `hillar_django_restful_06_01`
    folder in the `restful01/drones/urls.py` file:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，我们指定了一个表示视图的函数。在这种情况下，我们为每个合适的基于类的视图调用`as_view`方法。示例的代码文件包含在`restful01/drones/urls.py`文件中的`hillar_django_restful_06_01`文件夹内：
- en: '[PRE43]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now, we have to replace the code in the `urls.py` file in the `restful01` folder,
    specifically, the `restful01/urls.py` file. The file defines the root URL configurations,
    and therefore, we must include the URL patterns declared in the previously coded
    `drones/urls.py` file. The following lines show the new code for the `restful01/urls.py`
    file. The code file for the sample is included in the `hillar_django_restful_06_01`
    folder, in the `restful01/urls.py` file:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须替换`restful01`文件夹中的`urls.py`文件中的代码，特别是`restful01/urls.py`文件。该文件定义了根URL配置，因此我们必须包含之前编写的`drones/urls.py`文件中声明的URL模式。以下行显示了`restful01/urls.py`文件的新代码。示例的代码文件包含在`hillar_django_restful_06_01`文件夹中的`restful01/urls.py`文件内：
- en: '[PRE44]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Making requests that interact with resources that have relationships
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向与具有关系的资源进行交互的请求
- en: Now, we will use the HTTP command or its curl equivalents to compose and send
    HTTP requests to the recently coded RESTful Web Service that allows us to work
    with drone categories, drones, pilots, and competitions. We will use JSON for
    the requests that require additional data. Remember that you can perform the same
    tasks with your favorite GUI- based tool or with the browsable API.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用HTTP命令或其curl等价物来编写和发送HTTP请求到最近编写的RESTful Web服务，该服务允许我们处理无人机类别、无人机、飞行员和比赛。我们将使用JSON进行需要额外数据的请求。请记住，您可以使用您喜欢的基于GUI的工具或通过可浏览的API执行相同的任务。
- en: Launch Django's development server to compose and send HTTP requests to our
    new unsecure Web service. We will definitely add security later. In case you don't
    remember how to start Django's development server, check the instructions in [Chapter
    3](dj-rst-websvc_ch13.html), *Creating API Views*, in the *Launching Django's
    development server* section.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 启动Django的开发服务器以编写和发送HTTP请求到我们新的不安全的Web服务。我们肯定会稍后添加安全性。如果你不记得如何启动Django的开发服务器，请查看*启动Django的开发服务器*部分中的[第3章](dj-rst-websvc_ch13.html)，*创建API视图*的说明。
- en: 'First, we will compose and send an HTTP `POST` request to create a new drone
    category:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将编写并发送一个创建新无人机类别的 HTTP `POST` 请求：
- en: '[PRE45]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The following is the equivalent curl command:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的 curl 命令：
- en: '[PRE46]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The previous command will compose and send a `POST` HTTP request with the specified
    JSON key/value pair. The request specifies `/drone-categories/`, and therefore,
    it will match the `'^drone-categories/$'` regular expression and run the `post`
    method for the `views.DroneCategoryList` class based view. Remember that the method
    is defined in the `ListCreateAPIView` superclass and it ends up calling the `create`
    method defined in `mixins.CreateModelMixin`.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将编写并发送一个带有指定 JSON 键/值对的 `POST` HTTP 请求。请求指定 `/drone-categories/`，因此它将匹配
    `'^drone-categories/$'` 正则表达式，并运行 `views.DroneCategoryList` 类视图的 `post` 方法。请记住，该方法定义在
    `ListCreateAPIView` 超类中，并最终调用在 `mixins.CreateModelMixin` 中定义的 `create` 方法。
- en: 'If the new `DroneCategory` instance was successfully persisted in the database,
    the call to the method will return an `HTTP 201 Created` status code and the recently
    persisted `DroneCategory` serialized to JSON in the response body. The following
    line shows a sample response for the HTTP request with the new `DroneCategory`
    object in the JSON response. Notice that the response body includes both the primary
    key, `pk`, and the URL, `url`, for the created category. The `drones` array is
    empty because there aren''t drones related to the recently created drone category
    yet. The response doesn''t include the header to focus on the body:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 如果新的 `DroneCategory` 实例成功持久化到数据库中，对该方法的调用将返回 `HTTP 201 Created` 状态码，并将最近持久化的
    `DroneCategory` 序列化为 JSON 放在响应体中。以下行显示了带有新 `DroneCategory` 对象的 HTTP 请求的示例响应。注意，响应体包括创建的类别的主键
    `pk` 和 URL，`url`。`drones` 数组为空，因为没有与最近创建的无人机类别相关的无人机。响应不包括标题，以关注正文：
- en: '[PRE47]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now, we will compose and send HTTP requests to create two drones that belong
    to the drone category we recently created: `Quadcopter`. We specify the `drone_category`
    value with the name of the desired drone category. The database table that persists
    the `Drone` model (the `drones_drone` table) will save the value of the primary
    key of the related `DroneCategory` whose name value matches the one we provide:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写并发送 HTTP 请求来创建两个属于我们最近创建的无人机类别：`Quadcopter` 的无人机。我们使用所需无人机类别的名称指定 `drone_category`
    值。持久化 `Drone` 模型（`drones_drone` 表）的数据库表将保存与名称值匹配的关联 `DroneCategory` 的主键值：
- en: '[PRE48]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The following are the equivalent curl commands:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的 curl 命令：
- en: '[PRE49]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The previous commands will compose and send two `POST` HTTP requests with the
    specified JSON key/value pairs. The request specifies `/toys/`, and therefore,
    it will match the `'^toys/$'` regular expression and run the `post` method for
    the `views.DroneList` class based view.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将编写并发送两个带有指定 JSON 键/值对的 `POST` HTTP 请求。请求指定 `/toys/`，因此它将匹配 `'^toys/$'`
    正则表达式，并运行 `views.DroneList` 类视图的 `post` 方法。
- en: 'The following lines show sample responses for the two HTTP requests with the
    new `Drone` objects in the JSON responses. Notice that the response includes only
    the URL, `url`, for the created drones and doesn''t include the primary key. The
    value for `drone_category` is the `name` for the related `DroneCategory`:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了两个带有新 `Drone` 对象的 JSON 响应的示例响应。注意，响应仅包括创建的无人机的 URL，`url`，而不包括主键。`drone_category`
    的值是相关 `DroneCategory` 的 `name`：
- en: '[PRE50]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'We can run the commands explained in the *Analyzing the database* section to
    check the rows that were inserted in the tables that Django created in the PostgreSQL
    database to persist the models. The `drone_category_id` column for the `drones_drone`
    table saves the value of the primary key of the related row in the `drones_drone_category`
    table. The `DroneSerializer` class uses the `SlugRelatedField` to display the
    `name` value for the related `DroneCategory`. The following screenshot uses the
    psql command-line utility to query the contents for the `drones_drone_category`
    and the `drones_drone` table in a PostgreSQL database after running the HTTP requests:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以运行 *分析数据库* 部分中解释的命令来检查 Django 在 PostgreSQL 数据库中创建的表中的插入行。`drones_drone`
    表的 `drone_category_id` 列保存与 `drones_drone_category` 表中相关行的主键值。`DroneSerializer`
    类使用 `SlugRelatedField` 来显示相关 `DroneCategory` 的 `name` 值。以下屏幕截图使用 psql 命令行工具查询在
    PostgreSQL 数据库中运行 HTTP 请求后的 `drones_drone_category` 和 `drones_drone` 表的内容：
- en: '![](img/2a5cb57b-0975-4e63-a8a5-e42b7ad348a4.png)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2a5cb57b-0975-4e63-a8a5-e42b7ad348a4.png)'
- en: 'Now, we will compose and send an HTTP request to retrieve the drone category
    that contains the two drones we created. Don''t forget to replace `1` with the
    primary key value of the drone category whose name is equal to `''Quadcopter''`
    in your configuration:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将组合并发送一个HTTP请求来检索包含我们创建的两个无人机的无人机类别。别忘了将`1`替换为配置中名称等于`'Quadcopter'`的无人机类别的主键值：
- en: '[PRE51]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The following is the equivalent curl command:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的curl命令：
- en: '[PRE52]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The previous commands will compose and send the following HTTP request: `GET
    http://localhost:8000/drone-categories/1`. The request has a number after `/drone-categories/`,
    and therefore, it will match the `''^drone-categories/(?P<pk>[0-9]+)$''` regular
    expression and run the `get` method for the `views.DroneCategoryDetail` class-based
    view.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将组合并发送以下HTTP请求：`GET http://localhost:8000/drone-categories/1`。请求在`/drone-categories/`之后有一个数字，因此，它将匹配`'^drone-categories/(?P<pk>[0-9]+)$'`正则表达式，并运行`views.DroneCategoryDetail`类视图的`get`方法。
- en: 'Remember that the method is defined in the `RetrieveUpdateDestroyAPIView` superclass
    and it ends up calling the `retrieve` method defined in `mixins.RetrieveModelMixin`.
    The following lines show a sample response for the HTTP request, with the `DroneCategory`
    object and the hyperlinks of the related drones in the JSON response:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，该方法定义在`RetrieveUpdateDestroyAPIView`超类中，并最终调用在`mixins.RetrieveModelMixin`中定义的`retrieve`方法。以下行显示了HTTP请求的示例响应，其中包含`DroneCategory`对象以及JSON响应中相关无人机的超链接：
- en: '[PRE53]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The `DroneCategorySerializer` class defined the `drones` attribute as a `HyperlinkedRelatedField`,
    and therefore, the serializer renders the URL for each related `Drone` instance
    in the value for the `drones` array. Later, we will display the results in a web
    browser through the browsable API and we will be able to click or tap on the hyperlink
    to see the details for each drone.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`DroneCategorySerializer`类将`drones`属性定义为`HyperlinkedRelatedField`，因此序列化器在`drones`数组中为每个相关`Drone`实例渲染URL。稍后，我们将通过可浏览的API在网页浏览器中显示结果，并且我们能够点击或轻触超链接以查看每个无人机的详细信息。'
- en: 'Now, we will compose and send an HTTP `POST` request to create a drone related
    to a drone category name that doesn''t exist: `''Octocopter''`:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将组合并发送一个HTTP `POST`请求来创建一个与不存在的无人机类别名称相关的无人机：`'Octocopter'`：
- en: '[PRE54]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The following is the equivalent `curl` command:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的`curl`命令：
- en: '[PRE55]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Django won''t be able to retrieve a `DroneCategory` instance whose `name` is
    equal to the specified value: `Octocopter`. Hence, as a result of the previous
    request, we will receive a `400 Bad Request` status code in the response header
    and a message related to the value specified for the `drone_category` key in the
    JSON body. The following lines show a sample response:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: Django无法检索一个`DroneCategory`实例，其`name`等于指定的值：`Octocopter`。因此，由于之前的请求，我们将在响应头中收到`400
    Bad Request`状态码，并在JSON体中与`drone_category`键指定的值相关的消息。以下行显示了示例响应：
- en: '[PRE56]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Now, we will compose and send HTTP requests to create two pilots:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将组合并发送HTTP请求来创建两个飞行员：
- en: '[PRE57]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The following are the equivalent curl commands:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的curl命令：
- en: '[PRE58]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The previous commands will compose and send two HTTP `POST` requests with the
    specified JSON key/value pairs. The request specifies `/pilots/`, and therefore,
    it will match the `'^Pilots/$'` regular expression and run the `post` method for
    the `views.PilotList` class-based view.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将组合并发送两个带有指定JSON键/值对的HTTP `POST`请求。请求指定`/pilots/`，因此，它将匹配`'^Pilots/$'`正则表达式，并运行`views.PilotList`类视图的`post`方法。
- en: 'The following lines show sample responses for the two HTTP requests with the
    new `Pilot` objects in the JSON responses. Notice that the response includes only
    the url, `url`, for the created pilots and doesn''t include the primary key. The
    value for `gender_description` is the choice description for the `gender` char.
    The `competitions` array is empty because there aren''t competitions related to
    each new `Pilot` yet. The responses don''t include the headers:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了两个带有新`Pilot`对象的HTTP请求的示例响应。请注意，响应仅包括创建的飞行员的`url`，不包括主键。`gender_description`的值是`gender`字符的选择描述。`competitions`数组为空，因为没有与每个新`Pilot`相关的比赛。响应不包括头信息：
- en: '[PRE59]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Now, we will compose and send many HTTP `POST` requests to create three competitions:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将组合并发送多个HTTP `POST`请求来创建三个比赛：
- en: '[PRE60]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The following are the equivalent curl commands:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的curl命令：
- en: '[PRE61]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The previous commands will compose and send three HTTP `POST` requests with
    the specified JSON key/value pairs. The request specifies `/competitions/`, and
    therefore, it will match the `'^competitions/$'` regular expression and run the
    `post` method for the `views.CompetitionList` class based view.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将编写并发送三个带有指定 JSON 键/值对的 HTTP `POST` 请求。请求指定 `/competitions/`，因此它将匹配 `'^competitions/$'`
    正则表达式，并运行 `views.CompetitionList` 类视图的 `post` 方法。
- en: 'The following lines show sample responses for the three HTTP requests with
    the new `Competition` objects in the JSON responses. Django REST framework uses
    the `PilotCompetitionSerializer` class to generate the JSON response. Hence, the
    value for `drone` is the name for the related `Drone` instance and the value for
    `Pilot` is the name for the related `Pilot` instance. The `PilotCompetitionSerializer`
    class used `SlugRelatedField` for both fields, and therefore, we can specify the
    names as the values for both the `drone` and `pilot` keys. The responses don''t
    include the headers:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 以下几行显示了三个 HTTP 请求的样本响应，其中包含 JSON 响应中的新 `Competition` 对象。Django REST 框架使用 `PilotCompetitionSerializer`
    类生成 JSON 响应。因此，`drone` 的值是相关 `Drone` 实例的名称，而 `Pilot` 的值是相关 `Pilot` 实例的名称。`PilotCompetitionSerializer`
    类为两个字段都使用了 `SlugRelatedField`，因此我们可以将名称指定为 `drone` 和 `pilot` 键的值。响应不包括头部信息：
- en: '[PRE62]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'We can run the commands explained in the *Analyzing the database* section to
    check the rows that were inserted in the tables that Django created in the PostgreSQL
    database to persist the models. The `drone_id` column for the `drones_competition`
    table saves the value of the primary key of the related row in the `drones_drone`
    table. In addition, the `pilot_id` column for the `drones_competition` table saves
    the value of the primary key of the related row in the `drones_pilot` table. The
    following screenshot uses the `psql` command-line utility to query the contents
    for the `drones_drone_category`, `drones_drone`, `drones_pilot`, and `drones_competition`
    tables in a PostgreSQL database after running the HTTP requests:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以运行在 *分析数据库* 部分中解释的命令来检查 Django 在 PostgreSQL 数据库中创建的表中插入的行。`drones_competition`
    表的 `drone_id` 列保存了 `drones_drone` 表中相关行的主键值。此外，`drones_competition` 表的 `pilot_id`
    列保存了 `drones_pilot` 表中相关行的主键值。以下屏幕截图使用 `psql` 命令行实用程序在运行 HTTP 请求后查询 PostgreSQL
    数据库中 `drones_drone_category`、`drones_drone`、`drones_pilot` 和 `drones_competition`
    表的内容：
- en: '![](img/6506be8a-b1f8-4cad-9293-0cf7393115da.png)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6506be8a-b1f8-4cad-9293-0cf7393115da.png)'
- en: 'Now, we will compose and send an HTTP `GET` request to retrieve a specific
    pilot that participated in two competitions, that is, the pilot resource whose
    id or primary key is equal to `1`. Don''t forget to replace `1` with the primary
    key value of the Pilot whose name is equal to `''Penelope Pitstop''` in your configuration:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写并发送一个 HTTP `GET` 请求来检索参加了两个比赛的特定飞行员，即 ID 或主键等于 `1` 的飞行员资源。不要忘记将 `1`
    替换为配置中名称等于 `'Penelope Pitstop'` 的飞行员的主键值：
- en: '[PRE63]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The following is the equivalent curl command:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的 curl 命令：
- en: '[PRE64]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The previous commands will compose and send the following HTTP request: `GET
    http://localhost:8000/Pilots/1`. The request has a number after `/pilots/`, and
    therefore, it will match the `''^Pilots/(?P<pk>[0-9]+)$''` regular expression
    and run the `get` method for the `views.PilotDetail` class-based view.'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将编写并发送以下 HTTP 请求：`GET http://localhost:8000/Pilots/1`。请求在 `/pilots/` 后面有一个数字，因此它将匹配
    `'^Pilots/(?P<pk>[0-9]+)$'` 正则表达式，并运行 `views.PilotDetail` 基于类的视图的 `get` 方法。
- en: 'Remember that the `get` method is defined in the `RetrieveUpdateDestroyAPIView`
    superclass and it ends up calling the `retrieve` method defined in `mixins.RetrieveModelMixin`.
    The following lines show a sample response for the HTTP request, with the `Pilot`
    object, the related `Competition` objects and the `Drone` object related to each
    `Competition` object in the JSON response:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，`get` 方法是在 `RetrieveUpdateDestroyAPIView` 超类中定义的，并且最终会调用在 `mixins.RetrieveModelMixin`
    中定义的 `retrieve` 方法。以下几行显示了 HTTP 请求的样本响应，其中包含 JSON 响应中的 `Pilot` 对象、相关 `Competition`
    对象以及与每个 `Competition` 对象相关的 `Drone` 对象：
- en: '[PRE65]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: The `PilotSerializer` class defined the `competitions` attribute as a `CompetitionSerializer`
    instance with the `many` argument equal to `True`. Hence, this serializer renders
    each `Competition` related to the `Pilot`. The `CompetitionSerializer` class defined
    the `drone` attribute as a `DroneSerializer`, and therefore, this serializer renders
    each drone related to the competition.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`PilotSerializer`类将`competitions`属性定义为`CompetitionSerializer`实例，其中`many`参数等于`True`。因此，这个序列化器渲染与`Pilot`相关的每个`Competition`。`CompetitionSerializer`类将`drone`属性定义为`DroneSerializer`，因此，这个序列化器渲染与比赛相关的每个无人机。'
- en: Later, we will render the results in a web browser through the browsable API
    and we will be able to click or tap on the hyperlink of each of the related resources.
    However, in this case, we also see all their details without having to follow
    the hyperlink in the JSON response body.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将通过可浏览的API在网页浏览器中渲染结果，并且我们可以点击或轻触每个相关资源的超链接。然而，在这种情况下，我们也可以在JSON响应体中看到所有这些细节，而无需跟随超链接。
- en: Test your knowledge
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: Let's see whether you can answer the following questions correctly.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看你是否能正确回答以下问题。
- en: 'The `related_name` argument for the `django.db.models.ForeignKey` class initializer
    specifies:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`django.db.models.ForeignKey`类初始化器的`related_name`参数指定：'
- en: The name to use for the relation from the related object back to this object
  id: totrans-356
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于从相关对象返回到此对象的关系的名称
- en: The related model class name
  id: totrans-357
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 相关模型类的名称
- en: The related model primary key attribute name
  id: totrans-358
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 相关模型主键属性名称
- en: 'If we use the following line to declare the `pilot` field in the `Competition`
    model: `pilot = models.ForeignKey(Pilot, related_name=''competitions'', on_delete=models.CASCADE)`.
    What will Django''s ORM do whenever we delete a specific Pilot?'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们使用以下行在`Competition`模型中声明`pilot`字段：`pilot = models.ForeignKey(Pilot, related_name='competitions',
    on_delete=models.CASCADE)`。每当删除一个特定的飞行员时，Django的ORM会做什么？
- en: All the related competitions in which this `Pilot` participated will remain
    without changes in the database
  id: totrans-360
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个`Pilot`参与的所有的相关比赛在数据库中将保持不变
- en: All the related competitions in which this `Pilot` participated will be deleted
    too
  id: totrans-361
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个`Pilot`参与的所有的相关比赛也将被删除
- en: All the related pilots that are related to the Competition will be deleted too
  id: totrans-362
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有与比赛相关的相关飞行员也将被删除
- en: 'The `rest_framework.serializers.HyperlinkedModelSerializer` class is a type
    of `ModelSerializer` that represents the relationships to other model instances
    with:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`rest_framework.serializers.HyperlinkedModelSerializer`类是`ModelSerializer`的一种类型，它通过以下方式表示与其他模型实例的关系：'
- en: Primary key values
  id: totrans-364
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主键值
- en: Foreign key values
  id: totrans-365
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 外键值
- en: Hyperlinks
  id: totrans-366
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 超链接
- en: 'Which of the following attributes defined in the Meta inner class for a class
    that inherits from `ModelSerializer` specifies the model related to the serializer
    that is being declared:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ModelSerializer的Meta内部类中定义的以下哪个属性指定了正在声明的序列化器相关的模型：
- en: related-model
  id: totrans-368
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 相关模型
- en: model
  id: totrans-369
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模型
- en: main-model
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主模型
- en: 'Which of the following attributes defined in the Meta inner class for a class
    that inherits from ModelSerializer specifies the tuple of string whose values
    indicate the field names that we want to include in the serialization from the
    model related to the serializer:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ModelSerializer的Meta内部类中定义的以下哪个属性指定了我们想要在序列化中包含的模型相关字段名称的字符串值的元组：
- en: included-fields
  id: totrans-372
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含字段
- en: fields
  id: totrans-373
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字段
- en: serialized-fields
  id: totrans-374
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 序列化字段
- en: The rights answers are included in the [Appendix](https://cdp.packtpub.com/django_restful_web_services__/wp-admin/post.php?post=44&action=edit#post_454), *Solutions*.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 正确答案包含在[附录](https://cdp.packtpub.com/django_restful_web_services__/wp-admin/post.php?post=44&action=edit#post_454)，*解决方案*。
- en: Summary
  id: totrans-376
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we defined the requirements for a complex RESTful Web Service
    in which we needed to work with drone categories, drones, pilots, and competitions.
    We created a new app with Django and configured the new web service.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们定义了复杂RESTful Web Service的需求，其中我们需要处理无人机类别、无人机、飞行员和比赛。我们使用Django创建了一个新应用并配置了新的Web服务。
- en: We defined many-to-one relationships between the models with `models.ForeignKey`.
    We configured Django to work with a PostgreSQL database. We executed migrations
    that generated tables with relationships between them. We analyzed the generated
    database and we configured serialization and deserialization for the models. We
    declared two serializers for a single model to understand the flexibility we have
    with Django and the Django REST framework.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `models.ForeignKey` 定义了模型之间的多对一关系。我们配置了 Django 以与 PostgreSQL 数据库一起工作。我们执行了迁移，生成了具有相互关系表的数据库。我们分析了生成的数据库，并为模型配置了序列化和反序列化。我们为单个模型声明了两个序列化器，以了解
    Django 和 Django REST 框架提供的灵活性。
- en: We defined hyperlinks with the help of the `HyperlinkedModelSerializer` class
    and we worked with class-based views. In this case, we took advantage of generic
    classes and generic views that generalize and mix predefined behaviors. We worked
    with routings and endpoints and we prepared our RESTful Web Service to work with
    the browsable API. We made many different HTTP requests to create and retrieve
    resources that have relationships between them. We did everything without writing
    a huge amount of code.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `HyperlinkedModelSerializer` 类的帮助下定义了超链接，并使用基于类的视图进行了工作。在这种情况下，我们利用了通用类和通用视图，它们将预定义的行为进行泛化和混合。我们处理了路由和端点，并准备我们的
    RESTful Web 服务以与可浏览的 API 一起工作。我们进行了许多不同的 HTTP 请求来创建和检索具有相互关系资源。我们做了所有这些事情，而没有编写大量的代码。
- en: Now that we understand how to work with class-based views, and to take advantage
    of generalized behaviors and materialize complex relationships, we will add constraints,
    filtering, searching, ordering, and pagination features to our RESTful Web Service.
    We will cover these topics in the next chapter.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何使用基于类的视图，并利用通用行为和实现复杂关系，我们将向我们的 RESTful Web 服务添加约束、过滤、搜索、排序和分页功能。我们将在下一章中介绍这些主题。
