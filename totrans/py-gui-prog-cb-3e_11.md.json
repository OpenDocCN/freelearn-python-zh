["```py\n# Spaghetti Code ############################# \ndef PRINTME(me):print(me) \nimport tkinter  \nx=y=z=1 \nPRINTME(z)  \nfrom tkinter import * \nscrolW=30;scrolH=6 \nwin=tkinter.Tk() \nif x:chVarUn=tkinter.IntVar() \nfrom tkinter import ttk \nWE='WE' \nimport tkinter.scrolledtext \noutputFrame=tkinter.ttk.LabelFrame(win,text=' Type into the scrolled text control: ') \nscr=tkinter.scrolledtext.ScrolledText(outputFrame,width=scrolW,height=scrolH,wrap=tkinter.WORD) \ne='E' \nscr.grid(column=1,row=1,sticky=WE) \noutputFrame.grid(column=0,row=2,sticky=e,padx=8) \nlFrame=None \nif y:chck2=tkinter.Checkbutton(lFrame,text=\"Enabled\",variable=chVarUn) \nwE='WE' \nif y==x:PRINTME(x)  \nlFrame=tkinter.ttk.LabelFrame(win,text=\"Spaghetti\") \nchck2.grid(column=1,row=4,sticky=tkinter.W,columnspan=3)   \nPRINTME(z) \nlFrame.grid(column=0,row=0,sticky=wE,padx=10,pady=10)  \nchck2.select() \ntry: win.mainloop() \nexcept:PRINTME(x) \nchck2.deselect() \nif y==x:PRINTME(x)  \n# End Pasta #############################\n```", "```py\n#====================== \n# imports \n#====================== \nimport tkinter as tk \nfrom tkinter import ttk \nfrom tkinter import scrolledtext \n#====================== \n# Create instance \n#====================== \nwin = tk.Tk()    \n#====================== \n# Add a title        \n#======================  \nwin.title(\"Python GUI\") \n#========================= \n# Disable resizing the GUI \n#========================= \nwin.resizable(0,0) \n\n```", "```py\n#============================================================= \n# Adding a LabelFrame, Textbox (Entry) and Combobox   \n#============================================================= \nlFrame = ttk.LabelFrame(win, text=\"Python GUI Programming Cookbook\") \nlFrame.grid(column=0, row=0, sticky='WE', padx=10, pady=10) \n#============================================================= \n# Using a scrolled Text control     \n#============================================================= \noutputFrame = ttk.LabelFrame(win, text=' Type into the scrolled text \ncontrol: ') \noutputFrame.grid(column=0, row=2, sticky='E', padx=8) \nscrolW = 30 \nscrolH =  6 \nscr = scrolledtext.ScrolledText(outputFrame, width=scrolW, \nheight=scrolH, wrap=tk.WORD) \nscr.grid(column=1, row=0, sticky='WE') \n```", "```py\n#============================================================= \n# Creating a checkbutton \n#============================================================= \nchVarUn = tk.IntVar() \ncheck2 = tk.Checkbutton(lFrame, text=\"Enabled\", variable=chVarUn) \ncheck2.deselect() \ncheck2.grid(column=1, row=4, sticky=tk.W, columnspan=3)  \n#====================== \n# Start GUI \n#====================== \nwin.mainloop()\n```", "```py\ndef PRINTME(me):print(me) \nimport tkinter  \nx=y=z=1 \nPRINTME(z)  \nfrom tkinter import *\n```", "```py\n#====================== \n# imports \n#====================== \nimport tkinter as tk \nfrom tkinter import ttk\n```", "```py\n#-----------------------------------\n```", "```py\nimport tkinter.scrolledtext \noutputFrame=tkinter.ttk.LabelFrame(win,text=' Type into the scrolled text \ncontrol: ') \nscr=tkinter.scrolledtext.ScrolledText(outputFrame,width=scrolW,height=scrolH,wrap=tkinter.WORD) \ne='E' \nscr.grid(column=1,row=1,sticky=WE) \noutputFrame.grid(column=0,row=2,sticky=e,padx=8) \nlFrame=None \nif y:chck2=tkinter.Checkbutton(lFrame,text=\"Enabled\",variable=chVarUn) \nwE='WE' \nif y==x:PRINTME(x)  \nlFrame=tkinter.ttk.LabelFrame(win,text=\"Spaghetti\")\n```", "```py\n#============================================================= \n# Adding a LabelFrame, Textbox (Entry) and Combobox   \n#============================================================= \nlFrame = ttk.LabelFrame(win, text=\"Python GUI Programming Cookbook\") \nlFrame.grid(column=0, row=0, sticky='WE', padx=10, pady=10) \n\n#============================================================= \n# Using a scrolled Text control     \n#============================================================= \noutputFrame = ttk.LabelFrame(win, text=' Type into the scrolled text \ncontrol: ') \noutputFrame.grid(column=0, row=2, sticky='E', padx=8)\n```", "```py\n#-----------------------------------\n```", "```py\ndef PRINTME(me):print(me) \nx=y=z=1 \ne='E' \nWE='WE' \nscr.grid(column=1,row=1,sticky=WE) \nwE='WE' \nif y==x:PRINTME(x)  \nlFrame.grid(column=0,row=0,sticky=wE,padx=10,pady=10)  \nPRINTME(z) \ntry: win.mainloop() \nexcept:PRINTME(x) \nchck2.deselect() \nif y==x:PRINTME(x)\n```", "```py\n#-----------------------------------\n```", "```py\nimport tkinter \nx=y=z=1 \nPRINTME(z)  \nfrom tkinter import * \nscrolW=30;scrolH=6 \nwin=tkinter.Tk() \nif x:chVarUn=tkinter.IntVar() \nfrom tkinter import ttk \nWE='WE' \nimport tkinter.scrolledtext\n```", "```py\nimport tkinter as tk \nfrom tkinter import ttk \nfrom tkinter import scrolledtext\n```", "```py\n#-----------------------------------\n```", "```py\nx=y=z=1 \nif x:chVarUn=tkinter.IntVar() \nwE='WE'\n```", "```py\n#============================================================= \n# Using a scrolled Text control     \n#============================================================= \noutputFrame = ttk.LabelFrame(win, text=' Type into the scrolled text\ncontrol: ') \noutputFrame.grid(column=0, row=2, sticky='E', padx=8) \nscrolW = 30 \nscrolH =  6 \nscr = scrolledtext.ScrolledText(outputFrame, width=scrolW, \nheight=scrolH, wrap=tk.WORD) \nscr.grid(column=1, row=0, sticky='WE')\n```", "```py\n#====================== \n# imports \n#====================== \nimport tkinter as tk \nfrom tkinter import ttk \n#====================== \n# Create instance \n#====================== \nwin = tk.Tk()    \n#====================== \n# Add a title        \n#======================  \nwin.title(\"Python GUI\") \n```", "```py\n#============================================================= \n# Adding a LabelFrame and a Button \n#============================================================= \nlFrame = ttk.LabelFrame(win, text=\"Python GUI Programming Cookbook\") \nlFrame.grid(column=0, row=0, sticky='WE', padx=10, pady=10) \ndef clickMe(): \n    from tkinter import messagebox \n    messagebox.showinfo('Message Box', 'Hi from same Level.') \nbutton = ttk.Button(lFrame, text=\"Click Me \", command=clickMe) \nbutton.grid(column=1, row=0, sticky=tk.S)   \n#====================== \n# Start GUI \n#====================== \nwin.mainloop()\n```", "```py\nfrom tkinter import messagebox\n\ndef clickMe():\n    messagebox.showinfo('Imported Message Box', 'Hi from Level 3')\n```", "```py\nfrom Ch11_Code.Folder1.Folder2.Folder3.MessageBox import clickMe\n```", "```py\n# def clickMe():         # commented out\n# from tkinter import messagebox\n# messagebox.showinfo('Message Box', 'Hi from same Level.')\n```", "```py\nprint('hi from GUI init\\n') \nfrom sys import path \nfrom pprint import pprint \n#===================================================================\n# Required setup for the PYTONPATH in order to find all package \n# folders \n#===================================================================\nfrom site import addsitedir \nfrom os import getcwd, chdir, pardir \nwhile True: \n    curFull = getcwd() \n    curDir = curFull.split('\\\\')[-1]  \n    if 'Ch11_Code' == curDir: \n        addsitedir(curFull) \n        addsitedir(curFull + 'Folder1\\Folder2\\Folder3') \n        break \n    chdir(pardir) \npprint(path)\n```", "```py\n# from Ch11_Code.Folder1.Folder2.Folder3.MessageBox import clickMe # comment out\nimport __init__ \nfrom MessageBox import clickMe\n```", "```py\ndef clickMe(): \n    from tkinter import messagebox \n    messagebox.showinfo('Message Box', 'Hi from same Level.')\n```", "```py\nfrom Ch11_Code.Folder1.Folder2.Folder3.MessageBox import clickMe\n```", "```py\n#====================== \n# imports \n#====================== \nimport tkinter as tk \nfrom tkinter import ttk \nfrom tkinter import messagebox \n#====================== \n# Create instance \n#====================== \nwin = tk.Tk()    \n#====================== \n# Add a title        \n#======================  \nwin.title(\"Python GUI\") \n#========================= \n# Disable resizing the GUI \n#========================= \nwin.resizable(0,0) \n```", "```py\n#============================================================= \n# Adding a LabelFrame, Textbox (Entry) and Combobox   \n#============================================================= \nlFrame = ttk.LabelFrame(win, text=\"Python GUI Programming Cookbook\") \nlFrame.grid(column=0, row=0, sticky='WE', padx=10, pady=10) \n#============================================================= \n# Labels \n#============================================================= \nttk.Label(lFrame, text=\"Enter a name:\").grid(column=0, row=0) \nttk.Label(lFrame, text=\"Choose a number:\").grid(column=1, row=0, sticky=tk.W) \n#============================================================= \n# Buttons click command \n#============================================================= \ndef clickMe(name, number): \n    messagebox.showinfo('Information Message Box', 'Hello '+name+  \n    ', your number is: ' + number) \n```", "```py\n#============================================================= \n# Creating several controls in a loop \n#============================================================= \nnames         = ['name0', 'name1', 'name2'] \nnameEntries   = ['nameEntry0', 'nameEntry1', 'nameEntry2'] \nnumbers       = ['number0', 'number1', 'number2'] \nnumberEntries = ['numberEntry0', 'numberEntry1', 'numberEntry2'] \nbuttons = [] \nfor idx in range(3): \n    names[idx] = tk.StringVar() \n    nameEntries[idx] = ttk.Entry(lFrame, width=12, \n    textvariable=names[idx]) \n    nameEntries[idx].grid(column=0, row=idx+1) \n    nameEntries[idx].delete(0, tk.END) \n    nameEntries[idx].insert(0, '<name>') \n    numbers[idx] = tk.StringVar() \n    numberEntries[idx] = ttk.Combobox(lFrame, width=14,\n    textvariable=numbers[idx]) \n    numberEntries[idx]['values'] = (1+idx, 2+idx, 4+idx, 42+idx, \n    100+idx) \n    numberEntries[idx].grid(column=1, row=idx+1) \n    numberEntries[idx].current(0) \n    button = ttk.Button(lFrame, text=\"Click Me \"+str(idx+1), \n    command=lambda idx=idx: clickMe(names[idx].get(), \n    numbers[idx].get())) \n    button.grid(column=2, row=idx+1, sticky=tk.W)   \n    buttons.append(button) \n#====================== \n# Start GUI \n#====================== \nwin.mainloop()\n```", "```py\nimport tkinter as tk\nfrom tkinter import ttk\nfrom tkinter import messagebox\n#===================================================================\n# Add this code at the top\nclass ToolTip(object):\n    def __init__(self, widget, tip_text=None):\n        self.widget = widget\n        self.tip_text = tip_text\n        widget.bind('<Enter>', self.mouse_enter)     \n        widget.bind('<Leave>', self.mouse_leave)\n    def mouse_enter(self, _event): \n        self.show_tooltip()        \n    def mouse_leave(self, _event):\n        self.hide_tooltip()\n    def show_tooltip(self):\n        if self.tip_text:\n            x_left = self.widget.winfo_rootx() \n            # get widget top-left coordinates\n            y_top = self.widget.winfo_rooty() - 18 \n            # place tooltip above widget\n\n            self.tip_window = tk.Toplevel(self.widget) \n            self.tip_window.overrideredirect(True) \n            self.tip_window.geometry(\"+%d+%d\" % (x_left, y_top))  \n            label = tk.Label(self.tip_window, text=self.tip_text, \n                          justify=tk.LEFT, background=\"#ffffe0\", \n                          relief=tk.SOLID, borderwidth=1,\n                          font=(\"tahoma\", \"8\", \"normal\"))\n            label.pack(ipadx=1)\n    def hide_tooltip(self):\n        if self.tip_window:\n            self.tip_window.destroy() \n#====================================\n# ...\n# Add this code at the bottom\n    # Add Tooltips to widgets\n    ToolTip(nameEntries[idx], 'This is an Entry widget.') \n    ToolTip(numberEntries[idx], 'This is a DropDown widget.') \n    ToolTip(buttons[idx], 'This is a Button widget.') \n#======================\n# Start GUI\n#======================\nwin.mainloop()\n```", "```py\nimport tkinter as tk \nfrom tkinter import ttk \nfrom tkinter import scrolledtext \nfrom tkinter import Menu \n```", "```py\nclass OOP(): \n    def __init__(self):  \n        self.win = tk.Tk()          \n        self.win.title(\"Python GUI\")       \n        self.createWidgets() \n```", "```py\ndef createWidgets(self): \n    tabControl = ttk.Notebook(self.win) \n    tab1 = ttk.Frame(tabControl) \n    tabControl.add(tab1, text='Tab 1') \n    tabControl.pack(expand=1, fill=\"both\") \n    self.monty = ttk.LabelFrame(tab1, text=' Mighty Python ') \n    self.monty.grid(column=0, row=0, padx=8, pady=4) \n\n    ttk.Label(self.monty, text=\"Enter a name:\").grid(column=0, \n    row=0, sticky='W') \n    self.name = tk.StringVar() \n    nameEntered = ttk.Entry(self.monty, width=12, \n    textvariable=self.name) \n    nameEntered.grid(column=0, row=1, sticky='W') \n\n    self.action = ttk.Button(self.monty, text=\"Click Me!\") \n    self.action.grid(column=2, row=1) \n\n    ttk.Label(self.monty, text=\"Choose a number:\")\n    .grid(column=1, row=0) \n    number = tk.StringVar() \n    numberChosen = ttk.Combobox(self.monty, width=12, \n    textvariable=number) \n    numberChosen['values'] = (42) \n    numberChosen.grid(column=1, row=1) \n    numberChosen.current(0) \n\n    scrolW = 30; scrolH = 3 \n    self.scr = scrolledtext.ScrolledText(self.monty, width=scrolW, \n    height=scrolH, wrap=tk.WORD) \n    self.scr.grid(column=0, row=3, sticky='WE', columnspan=3)\n```", "```py\n    menuBar = Menu(tab1) \n    self.win.config(menu=menuBar) \n    fileMenu = Menu(menuBar, tearoff=0) \n    menuBar.add_cascade(label=\"File\", menu=fileMenu) \n    helpMenu = Menu(menuBar, tearoff=0) \n    menuBar.add_cascade(label=\"Help\", menu=helpMenu) \n\n    nameEntered.focus()      \n#========================== \noop = OOP() \noop.win.mainloop()\n```", "```py\nimport tkinter as tk \nfrom tkinter import ttk \nfrom tkinter import scrolledtext \nfrom tkinter import Menu    \n\ndef createWidgets():     \n    tabControl = ttk.Notebook(win)      \n    tab1 = ttk.Frame(tabControl)             \n    tabControl.add(tab1, text='Tab 1')     \n    tabControl.pack(expand=1, fill=\"both\")   \n    monty = ttk.LabelFrame(tab1, text=' Mighty Python ') \n    monty.grid(column=0, row=0, padx=8, pady=4)         \n```", "```py\nttk.Label(monty, text=\"Enter a name:\").grid(column=0, row=0, \nsticky='W') \nname = tk.StringVar() \nnameEntered = ttk.Entry(monty, width=12, textvariable=name) \nnameEntered.grid(column=0, row=1, sticky='W') \n\naction = ttk.Button(monty, text=\"Click Me!\")    \naction.grid(column=2, row=1) \n\nttk.Label(monty, text=\"Choose a number:\").grid(column=1, row=0) \nnumber = tk.StringVar() \nnumberChosen = ttk.Combobox(monty, width=12, textvariable=number) \nnumberChosen['values'] = (42) \nnumberChosen.grid(column=1, row=1) \nnumberChosen.current(0) \n\nscrolW = 30; scrolH = 3 \nscr = scrolledtext.ScrolledText(monty, width=scrolW, \nheight=scrolH, wrap=tk.WORD) \nscr.grid(column=0, row=3, sticky='WE', columnspan=3) \n```", "```py\nmenuBar = Menu(tab1) \nwin.config(menu=menuBar) \nfileMenu = Menu(menuBar, tearoff=0) \nmenuBar.add_cascade(label=\"File\", menu=fileMenu) \nhelpMenu = Menu(menuBar, tearoff=0) \nmenuBar.add_cascade(label=\"Help\", menu=helpMenu) \n\nnameEntered.focus()\n```", "```py\n#====================== \nwin = tk.Tk()          \nwin.title(\"Python GUI\")    \ncreateWidgets() \nwin.mainloop()\n```", "```py\nimport tkinter as tk\nfrom tkinter import ttk\nfrom tkinter import scrolledtext\nfrom tkinter import Menu\n```", "```py\nclass ButtonFactory():\n    def createButton(self, type_):\n        return buttonTypes[type_]()        \n```", "```py\nclass ButtonBase(): \n    relief ='flat'\n    foreground ='white'\n    def getButtonConfig(self):\n        return self.relief, self.foreground  \n```", "```py\nclass ButtonRidge(ButtonBase):\n    relief ='ridge'\n    foreground ='red'     \n\nclass ButtonSunken(ButtonBase):\n    relief ='sunken'\n    foreground ='blue' \n\nclass ButtonGroove(ButtonBase):\n    relief ='groove'\n    foreground ='green' \n```", "```py\nbuttonTypes = [ButtonRidge, ButtonSunken, ButtonGroove] \n```", "```py\nclass OOP():\n    def __init__(self): \n        self.win = tk.Tk() \n        self.win.title(\"Python GUI\") \n        self.createWidgets()\n\n    def createWidgets(self): \n        tabControl = ttk.Notebook(self.win) \n        tab1 = ttk.Frame(tabControl) \n        tabControl.add(tab1, text='Tab 1') \n        tabControl.pack(expand=1, fill=\"both\") \n        self.monty = ttk.LabelFrame(tab1, text=' Monty Python ')\n        self.monty.grid(column=0, row=0, padx=8, pady=4) \n        scr = scrolledtext.ScrolledText(self.monty, width=30, \n        height=3, wrap=tk.WORD)\n        scr.grid(column=0, row=3, sticky='WE', columnspan=3)\n        menuBar = Menu(tab1)\n        self.win.config(menu=menuBar)\n        fileMenu = Menu(menuBar, tearoff=0)\n        menuBar.add_cascade(label=\"File\", menu=fileMenu)\n        helpMenu = Menu(menuBar, tearoff=0)\n        menuBar.add_cascade(label=\"Help\", menu=helpMenu)       \n        self.createButtons()\n\n    def createButtons(self):            \n        factory = ButtonFactory() # <-- create the factory\n\n        # Button 1\n        rel = factory.createButton(0).getButtonConfig()[0]\n        fg = factory.createButton(0).getButtonConfig()[1]\n        action = tk.Button(self.monty, text=\"Button \"+str(0+1), \n        relief=rel, foreground=fg) \n        action.grid(column=0, row=1) \n        # Button 2\n        rel = factory.createButton(1).getButtonConfig()[0]\n        fg = factory.createButton(1).getButtonConfig()[1]\n        action = tk.Button(self.monty, text=\"Button \"+str(1+1), \n        relief=rel, foreground=fg) \n        action.grid(column=1, row=1) \n        # Button 3\n        rel = factory.createButton(2).getButtonConfig()[0]\n        fg = factory.createButton(2).getButtonConfig()[1]\n        action = tk.Button(self.monty, text=\"Button \"+str(2+1), \n        relief=rel, foreground=fg) \n        action.grid(column=2, row=1) \n#==========================\noop = OOP()\noop.win.mainloop()\n```", "```py\n#======================\n# imports\n#======================\nimport tkinter as tk\nfrom tkinter import ttk\nfrom tkinter import scrolledtext\nfrom tkinter import Menu\nfrom tkinter import Spinbox\nfrom Ch11_Code.ToolTip import ToolTip\n```", "```py\nGLOBAL_CONST = 42\n#=================================================================== \nclass OOP():\n    def __init__(self): \n        # Create instance\n        self.win = tk.Tk()         \n        # Add a title \n        self.win.title(\"Python GUI\") \n        self.createWidgets()   \n    # Button callback\n    def clickMe(self):\n        self.action.configure(text='Hello ' + self.name.get())    \n    # Button callback Clear Text \n    def clearScrol(self):\n        self.scr.delete('1.0', tk.END)     \n    # Spinbox callback \n    def _spin(self):\n        value = self.spin.get()\n        print(value)\n        self.scr.insert(tk.INSERT, value + '\\n')        \n    # Checkbox callback \n    def checkCallback(self, *ignoredArgs):\n        # only enable one checkbutton\n        if self.chVarUn.get(): \n            self.check3.configure(state='disabled')\n        else: self.check3.configure(state='normal')\n        if self.chVarEn.get(): \n            self.check2.configure(state='disabled')\n        else: self.check2.configure(state='normal')         \n    # Radiobutton callback function\n    def radCall(self):\n        radSel=self.radVar.get()\n        if radSel == 0: self.monty2.configure(text='Blue')\n        elif radSel == 1: self.monty2.configure(text='Gold')\n        elif radSel == 2: self.monty2.configure(text='Red') \n    # Exit GUI cleanly\n    def _quit(self):\n        self.win.quit()\n        self.win.destroy()\n        exit()     \n    def usingGlobal(self):\n        GLOBAL_CONST = 777\n        print(GLOBAL_CONST)\n```", "```py\n#######################################################################\ndef createWidgets(self): \n    tabControl = ttk.Notebook(self.win) # Create Tab Control \n    tab1 = ttk.Frame(tabControl) # Create a tab \n    tabControl.add(tab1, text='Tab 1') # Add the tab \n    tab2 = ttk.Frame(tabControl) # Add a second tab\n    tabControl.add(tab2, text='Tab 2') # Make second tab visible \n    tabControl.pack(expand=1, fill=\"both\") # Pack to make visible \n    self.monty = ttk.LabelFrame(tab1, text=' Mighty Python ')\n    self.monty.grid(column=0, row=0, padx=8, pady=4) \n\n    ttk.Label(self.monty, text=\"Enter a name:\").grid(column=0, \n    row=0, sticky='W') \n    self.name = tk.StringVar()\n    nameEntered = ttk.Entry(self.monty, width=12, \n    textvariable=self.name)\n    nameEntered.grid(column=0, row=1, sticky='W') \n\n    self.action = ttk.Button(self.monty, text=\"Click Me!\", \n    command=self.clickMe) \n    self.action.grid(column=2, row=1) \n    ttk.Label(self.monty, text=\"Choose a number:\").grid(column=1, \n    row=0)\n    number = tk.StringVar()\n    numberChosen = ttk.Combobox(self.monty, width=12, \n    textvariable=number)\n    numberChosen['values'] = (1, 2, 4, 42, 100)\n    numberChosen.grid(column=1, row=1)\n    numberChosen.current(0) \n\n    self.spin = Spinbox(self.monty, values=(1, 2, 4, 42, 100), \n    width=5, bd=8, command=self._spin) \n    self.spin.grid(column=0, row=2) \n\n    scrolW = 30; scrolH = 3\n    self.scr = scrolledtext.ScrolledText(self.monty, width=scrolW, \n    height=scrolH, wrap=tk.WORD)\n    self.scr.grid(column=0, row=3, sticky='WE', columnspan=3) \n\n    self.monty2 = ttk.LabelFrame(tab2, text=' Holy Grail ')\n    self.monty2.grid(column=0, row=0, padx=8, pady=4)\n\n    chVarDis = tk.IntVar()\n    check1 = tk.Checkbutton(self.monty2, text=\"Disabled\", \n    variable=chVarDis, state='disabled')\n    check1.select()\n    check1.grid(column=0, row=0, sticky=tk.W) \n    self.chVarUn = tk.IntVar()\n    self.check2 = tk.Checkbutton(self.monty2, text=\"UnChecked\", \n    variable=self.chVarUn)\n    self.check2.deselect()\n    self.check2.grid(column=1, row=0, sticky=tk.W ) \n    self.chVarEn = tk.IntVar()\n    self.check3 = tk.Checkbutton(self.monty2, text=\"Toggle\", \n    variable=self.chVarEn)\n    self.check3.deselect()\n    self.check3.grid(column=2, row=0, sticky=tk.W) \n\n    self.chVarUn.trace('w', lambda unused0, unused1, unused2 : \n    self.checkCallback()) \n    self.chVarEn.trace('w', lambda unused0, unused1, unused2 : \n    self.checkCallback()) \n\n    colors = [\"Blue\", \"Gold\", \"Red\"] \n    self.radVar = tk.IntVar() \n    self.radVar.set(99) \n\n    for col in range(3):\n        curRad = 'rad' + str(col) \n        curRad = tk.Radiobutton(self.monty2, text=colors[col], \n        variable=self.radVar, value=col, command=self.radCall)\n        curRad.grid(column=col, row=6, sticky=tk.W, columnspan=3)\n        ToolTip(curRad, 'This is a Radiobutton control.')\n\n    labelsFrame = ttk.LabelFrame(self.monty2, \n    text=' Labels in a Frame ')\n    labelsFrame.grid(column=0, row=7) \n\n    ttk.Label(labelsFrame, text=\"Label1\").grid(column=0, row=0)\n    ttk.Label(labelsFrame, text=\"Label2\").grid(column=0, row=1) \n\n    for child in labelsFrame.winfo_children(): \n        child.grid_configure(padx=8) \n\n    menuBar = Menu(tab1)\n    self.win.config(menu=menuBar) \n\n    fileMenu = Menu(menuBar, tearoff=0)\n    fileMenu.add_command(label=\"New\")\n    fileMenu.add_separator()\n    fileMenu.add_command(label=\"Exit\", command=self._quit)\n    menuBar.add_cascade(label=\"File\", menu=fileMenu) \n\n    helpMenu = Menu(menuBar, tearoff=0)\n    helpMenu.add_command(label=\"About\")\n    menuBar.add_cascade(label=\"Help\", menu=helpMenu) \n\n    self.win.iconbitmap('pyc.ico') \n\n    strData = tk.StringVar()\n    strData.set('Hello StringVar') \n    intData = tk.IntVar()\n    strData = tk.StringVar()\n    strData = self.spin.get() \n    self.usingGlobal() \n    nameEntered.focus() \n\n    ToolTip(self.spin, 'This is a Spin control.') \n    ToolTip(nameEntered, 'This is an Entry control.') \n    ToolTip(self.action, 'This is a Button control.') \n    ToolTip(self.scr, 'This is a ScrolledText control.') \n#======================\n# Start GUI\n#======================\noop = OOP()\noop.win.mainloop()\n```", "```py\n# Adding another Button \nself.action = ttk.Button(self.monty, text=\"Clear Text\", command=self.clearScrol)    \nself.action.grid(column=2, row=2)\n```", "```py\n# Button callback \ndef clickMe(self): \n    self.action.configure(text='Hello ' + self.name.get()) \n\n# Button callback Clear Text    \ndef clearScrol(self): \n    self.scr.delete('1.0', tk.END)\n```", "```py\n# Adding more Feature Buttons \nfor idx in range(3): \n    b = ttk.Button(self.monty, text=\"Feature\" + str(idx+1))    \n    b.grid(column=idx, row=4)\n```", "```py\n# Adding more Feature Buttons \nstartRow = 4\nfor idx in range(12):\n    if idx < 2: col = idx\n    else: col += 1\n    if not idx % 3: \n        startRow += 1\n        col = 0\n\n    b = ttk.Button(self.monty, text=\"Feature \" + str(idx+1)) \n    b.grid(column=col, row=startRow)\n```", "```py\n# Tab Control 3 ----------------------------------------- \n    tab3 = ttk.Frame(tabControl) # Add a tab \n    tabControl.add(tab3, text='Tab 3') # Make tab visible \n\n    monty3 = ttk.LabelFrame(tab3, text=' New Features ') \n    monty3.grid(column=0, row=0, padx=8, pady=4) \n\n    # Adding more Feature Buttons \n    startRow = 4 \n    for idx in range(24): \n        if idx < 2: col = idx \n        else: col += 1\n        if not idx % 3: \n            startRow += 1 \n            col = 0 \n\n        b = ttk.Button(monty3, text=\"Feature \" + str(idx+1)) \n        b.grid(column=col, row=startRow) \n\n    # Add some space around each label \n    for child in monty3.winfo_children(): \n        child.grid_configure(padx=8)\n```", "```py\nimport tkinter as tk\nfrom tkinter import ttk\nfrom tkinter import scrolledtext\nfrom tkinter import Menu\nfrom tkinter import Spinbox\nfrom tkinter.messagebox import showinfo\n```", "```py\ndef clickMe(button, name, number):\n    button.configure(text='Hello {} {}'.format(name.get(), \n    number.get()))\n\ndef clearScrol(scr):\n    scr.delete('1.0', tk.END) \n\ndef _spin(spin, scr):\n    value = spin.get()\n    print(value)\n    scr.insert(tk.INSERT, value + '\\n')\n\ndef checkCallback(*ignoredArgs):\n    pass\n#------------------------------------------\ndef create_display_area():\n    # add empty label for spacing \n    display_area_label = tk.Label(display_area, text=\"\", height=2)\n    display_area_label.grid(column=0, row=0)    \n#------------------------------------------\ndef clear_display_area():\n    # remove previous widget(s) from display_area:\n    for widget in display_area.grid_slaves():\n        if int(widget.grid_info()[\"row\"]) == 0:\n            widget.grid_forget() \n#------------------------------------------\ndef _quit():\n    win.quit()\n    win.destroy()\n    exit()     \n```", "```py\ndef create_menu(): \n    menuBar = Menu(win_frame_multi_row_tabs)\n    win.config(menu=menuBar)    \n\n    fileMenu = Menu(menuBar, tearoff=0)\n    fileMenu.add_command(label=\"New\")\n    fileMenu.add_separator()\n    fileMenu.add_command(label=\"Exit\", command=_quit)\n    menuBar.add_cascade(label=\"File\", menu=fileMenu)    \n\n    helpMenu = Menu(menuBar, tearoff=0)\n    helpMenu.add_command(label=\"About\")\n    menuBar.add_cascade(label=\"Help\", menu=helpMenu)  \n```", "```py\ndef display_tab1():\n    monty = ttk.LabelFrame(display_area, text=' Mighty Python ')\n    monty.grid(column=0, row=0, padx=8, pady=4)    \n\n    ttk.Label(monty, text=\"Enter a name:\").grid(column=0, row=0, \n    sticky='W')    \n\n    name = tk.StringVar()\n    nameEntered = ttk.Entry(monty, width=12, textvariable=name)\n    nameEntered.grid(column=0, row=1, sticky='W')    \n    ttk.Label(monty, text=\"Choose a number:\").grid(column=1, row=0)\n    number = tk.StringVar()\n    numberChosen = ttk.Combobox(monty, width=12, \n    textvariable=number)\n    numberChosen['values'] = (1, 2, 4, 42, 100)\n    numberChosen.grid(column=1, row=1)\n    numberChosen.current(0)\n\n    action = ttk.Button(monty, text=\"Click Me!\", \n    command= lambda: clickMe(action, name, number)) \n    action.grid(column=2, row=1)    \n\n    scrolW = 30; scrolH = 3\n    scr = scrolledtext.ScrolledText(monty, width=scrolW, \n    height=scrolH, wrap=tk.WORD)\n    scr.grid(column=0, row=3, sticky='WE', columnspan=3)            \n\n    spin = Spinbox(monty, values=(1, 2, 4, 42, 100), width=5, bd=8, \n    command= lambda: _spin(spin, scr)) \n    spin.grid(column=0, row=2, sticky='W')   \n\n    clear = ttk.Button(monty, text=\"Clear Text\", command= lambda: \n    clearScrol(scr)) \n    clear.grid(column=2, row=2)\n\n    startRow = 4\n    for idx in range(12):\n        if idx < 2:col = idx\n        else: col += 1\n        if not idx % 3: \n            startRow += 1\n            col = 0\n        b = ttk.Button(monty, text=\"Feature \" + str(idx+1)) \n        b.grid(column=col, row=startRow)    \n```", "```py\ndef display_tab2():\n    monty2 = ttk.LabelFrame(display_area, text=' Holy Grail ')\n    monty2.grid(column=0, row=0, padx=8, pady=4)    \n\n    chVarDis = tk.IntVar()\n    check1 = tk.Checkbutton(monty2, text=\"Disabled\", \n    variable=chVarDis, state='disabled')\n    check1.select()\n    check1.grid(column=0, row=0, sticky=tk.W)    \n    chVarUn = tk.IntVar()\n    check2 = tk.Checkbutton(monty2, text=\"UnChecked\", \n    variable=chVarUn)\n    check2.deselect()\n    check2.grid(column=1, row=0, sticky=tk.W )      \n    chVarEn = tk.IntVar()\n    check3 = tk.Checkbutton(monty2, text=\"Toggle\", \n    variable=chVarEn)\n    check3.deselect()\n    check3.grid(column=2, row=0, sticky=tk.W) \n\n    labelsFrame = ttk.LabelFrame(monty2, \n    text=' Labels in a Frame ')\n    labelsFrame.grid(column=0, row=7)     \n\n    ttk.Label(labelsFrame, text=\"Label1\").grid(column=0, row=0)\n    ttk.Label(labelsFrame, text=\"Label2\").grid(column=0, row=1)    \n\n    for child in labelsFrame.winfo_children(): \n        child.grid_configure(padx=8)        \n```", "```py\ndef display_tab3():\n    monty3 = ttk.LabelFrame(display_area, text=' New Features ')\n    monty3.grid(column=0, row=0, padx=8, pady=4)   \n\n    startRow = 4\n    for idx in range(24):\n        if idx < 2: col = idx\n        else: col += 1\n        if not idx % 3: \n            startRow += 1\n            col = 0    \n        b = ttk.Button(monty3, text=\"Feature \" + str(idx + 1)) \n        b.grid(column=col, row=startRow)         \n\n    for child in monty3.winfo_children(): \n        child.grid_configure(padx=8)          \n```", "```py\ndef display_button(active_notebook, tab_no):\n    btn = ttk.Button(display_area, text=active_notebook +' - Tab '+ \n    tab_no, \\ command= lambda: showinfo(\"Tab Display\", \n    \"Tab: \" + tab_no) )\n    btn.grid(column=0, row=0, padx=8, pady=8) \n```", "```py\ndef notebook_callback(event):\n    clear_display_area()    \n    current_notebook = str(event.widget)\n    tab_no = str(event.widget.index(\"current\") + 1)     \n    if current_notebook.endswith('notebook'):\n        active_notebook = 'Notebook 1'\n    elif current_notebook.endswith('notebook2'):\n        active_notebook = 'Notebook 2'\n    else:\n        active_notebook = ''        \n    if active_notebook is 'Notebook 1': \n        if tab_no == '1': display_tab1()\n        elif tab_no == '2': display_tab2()\n        elif tab_no == '3': display_tab3()\n        else: display_button(active_notebook, tab_no)\n    else:\n        display_button(active_notebook, tab_no)\n```", "```py\nwin = tk.Tk()                 # Create instance \nwin.title(\"Python GUI\")       # Add title \n#------------------------------------------\nwin_frame_multi_row_tabs = ttk.Frame(win)\nwin_frame_multi_row_tabs.grid(column=0, row=0, sticky='W')\ndisplay_area = ttk.Labelframe(win, text=' Tab Display Area ') \ndisplay_area.grid(column=0, row=1, sticky='WE')\nnote1 = ttk.Notebook(win_frame_multi_row_tabs)\nnote1.grid(column=0, row=0)\nnote2 = ttk.Notebook(win_frame_multi_row_tabs)\nnote2.grid(column=0, row=1)\n# create and add tabs to Notebooks\nfor tab_no in range(5):\n    tab1 = ttk.Frame(note1, width=0, height=0) \n    # Create a tab for notebook 1\n    tab2 = ttk.Frame(note2, width=0, height=0) \n    # Create a tab for notebook 2\n    note1.add(tab1, text=' Tab {} '.format(tab_no + 1)) \n    # Add tab notebook 1\n    note2.add(tab2, text=' Tab {} '.format(tab_no + 1)) \n    # Add tab notebook 2\n\n# bind click-events to Notebooks \nnote1.bind(\"<ButtonRelease-1>\", notebook_callback)\nnote2.bind(\"<ButtonRelease-1>\", notebook_callback)\n\ncreate_display_area()\ncreate_menu()\ndisplay_tab1()\n#-------------\nwin.mainloop() \n#-------------\n```"]